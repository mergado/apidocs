FORMAT: 1A9
HOST: https://api.mergado.com/

# Mergado
The Mergado API is based on REST principles. The request/response format is JSON.

## Requests

The recommended encoding of all requests is UTF-8. Requests must be made over **HTTPS** and
all endpoints start with `https://api.mergado.com/`. Note that almost all API endpoints
require [OAuth 2.0 authentication](https://tools.ietf.org/html/rfc6749).

### Allowed HTTPs requests

| Method | Description                                  |
|--------|----------------------------------------------|
| GET    | Retrieves a resource or a list of resources. |
| POST   | Creates or updates a resource.               |
| PATCH  | Updates a resource.                          |
| DELETE | Deletes a resource.                          |

### Additional GET parameters

| Parameter                    | Example                                   | Description |
|------------------------------|------------------------------------------ |-------------|
| **fields**                   | `?fields=uri,shop.id`                     | Only fields `uri` and `id` nested in `shop` will be returned in the given example. It works also for arrays of results - filter is applied to all their items, one by one. |
| **limit**, **offset**        | `?limit=5&offset=2`                       | Works for arrays only. It is for paging the results. In the example, 2 results from the beginning are skipped and only 5 following items are returned. The default limit for every array result is 10 items. |
| **date**                     | `?date=2015-12-24`                        | Works only for some special endpoints. In the example, it will return results corresponding only to Christmas Eve in 2015.
| **filter_by**                | `?filter_by={"item_id__in": "123456789"}` | Filters the result. You can also append field name with `__in`, i.e. filter results by enumerating all values of a field, for example `item_id__in` expects list of possible ITEM_IDs. |
| **order_by**                 | `?order_by=validator,-verdict`            | Orders the result in ascending or descending order. |

### Typical Server Responses

| Code | Status             | Description |
|------|--------------------|-------------|
| 200  | OK                 | The request was successful (some API calls may return 201 instead). |
| 201  | Created            | The request was successful and a resource was created. |
| 204  | No Content         | The request was successful but there is no representation to return (that is, the response is empty). |
| 400  | Bad Request        | The request could not be understood or was missing required parameters. |
| 401  | Unauthorized       | Authentication failed or user does not have permissions for the requested operation. |
| 403  | Forbidden          | Access denied. |
| 404  | Not Found          | Resource was not found. |
| 405  | Method Not Allowed | Requested method is not supported for the specified resource. |
| 409  | Conflict           | Resource already exists and could not be created. |

## OAuth 2.0

To access Mergado API, clients (e.g. an application) are required to authenticate with
[OAuth 2.0](https://tools.ietf.org/html/rfc6749). Each application is required to have
its OAuth credentials which can be obtained from the Mergado
[developers center](https://developers.mergado.com) (during registeration of your application,
a client ID and a secret key is assigned to your application).

* [Basics of OAuth 2.0 in Mergado Apps](http://mergado.github.io/docs/api/authorization.html)
* [List of all OAuth scopes](http://mergado.github.io/docs/api/oauth-scopes.html)

# Group Base
Various API resources that don't require any authentication.

## Info [/]
### Show API Version [GET]

+ Response 200

    + Headers

            Content-Type: application/json

    + Body

            {
                "version": "0.2"
            }

## XML Formats [/formats/]
Formats represent XML feeds and their specification supported by Mergado.

### List Supported Formats [GET]
Returns a list of IDs of all supported XML feed's formats.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            [
                "heureka.cz",
                "hledejceny.cz",
                "hyperzbozi.cz",
                "srovname.cz",
                "zbozi.cz",
                "heureka.cz-kosik",
                "heureka.sk",
                "najnakup.sk",
                "pricemania.sk"
            ]

## Tariffs [/tariffs/]
Lists tariffs available for users.

### List Available Tariffs [GET]
Returns available tariffs which are automatically chosen for each eshop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "limit": 10,
                "data": [
                    {
                        "id": "2",
                        "name": "Basic",
                        "price_czk": 286,
                        "price_eur": 11,
                        "price_pln": 49,
                        "price_usd": 12,
                        "price_gbp": 9
                    },
                    {
                        "id": "3",
                        "name": "Standard",
                        "price_czk": 586,
                        "price_eur": 22,
                        "price_pln": 99,
                        "price_usd": 22,
                        "price_gbp": 19
                    },
                    {
                        "id": "4",
                        "name": "Advanced",
                        "price_czk": 1286,
                        "price_eur": 49,
                        "price_pln": 219,
                        "price_usd": 52,
                        "price_gbp": 49
                    },
                    {
                        "id": "6",
                        "name": "Special 300",
                        "price_czk": 1786,
                        "price_eur": 70,
                        "price_pln": 299,
                        "price_usd": 72,
                        "price_gbp": 59
                    },
                    {
                        "id": "7",
                        "name": "Special 400",
                        "price_czk": 2286,
                        "price_eur": 89,
                        "price_pln": 379,
                        "price_usd": 92,
                        "price_gbp": 75
                    },
                    {
                        "id": "8",
                        "name": "Special 500",
                        "price_czk": 2768,
                        "price_pln": 459,
                        "price_eur": 108,
                        "price_usd": 112,
                        "price_gbp": 89
                    },
                    {
                        "id": "9",
                        "name": "Special 600",
                        "price_czk": 3286,
                        "price_eur": 129,
                        "price_pln": 549,
                        "price_usd": 132,
                        "price_gbp": 105
                    }
                ],
                "offset": 0
            }

### Get Tariff [GET /tariffs/{id}/{?fields}]
Returns requested tariff by its ID.

+ Parameters

    + id (string) - Tariff ID.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "3",
                "name": "Standard",
                "price_czk": 586,
                "price_eur": 22,
                "price_pln": 99,
                "price_usd": 22,
                "price_gbp": 19
            }

## Rule Definitions [/rules/definitions/{?limit,offset,fields}]
Definition of rules so that developers can see which rules expect what data.

+ Attributes

    + type (string) - Unique name of the rule.
    + relationship (enum[string]) - Whether the rule accepts an object
      (dictionary) as an argument or a list of objects.
        + members
            + 1:1
            + 1:N
    + fields - List of fields the rule accepts during instantiation.

### List Defined Rules [GET]
Returns definitions of all rules and required data for their instantiation.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "type": "format_converter",
                        "relationship": "1:1",
                        "fields": []
                    },
                    {
                        "type": "rewriting",
                        "relationship": "1:1",
                        "fields": [
                            {
                                "name": "new_content",
                                "required": true,
                                "type": "STRING"
                            }
                        ]
                    },
                    {
                        "type": "replacing",
                        "relationship": "1:1",
                        "fields": [
                            {
                                "name": "search",
                                "required": true,
                                "type": "STRING"
                            },
                            {
                                "name": "replacement",
                                "required": true,
                                "type": "STRING"
                            },
                            {
                                "name": "regex",
                                "required": true,
                                "type": "BOOLEAN"
                            },
                            {
                                "name": "case_sensitive",
                                "required": true,
                                "type": "BOOLEAN"
                            }
                        ]
                    }
                ],
                "limit": 10,
                "offset": 0
            }

# Group Core
Management of users, eshops, projects and other core resources.

## Apps [/apps/{?limit,offset,fields}]
Applications in Mergado.

+ Attributes

    + title (string) - Application's title.
    + type (enum[string]) - Scope of application. Application type can be user, eshop or project.
        + Members
            + user
            + eshop
            + project
    + creation_date (string) - Datetime when application was created.
    + trial_period (number) - How many days is application for free.
    + forum_url (string) - Application has it's own forum page.
    + latest_release_date (string) - Datetime of application latest release.

### Get App by Name [GET /apps/{id}/{?fields}]
Returns application for given application name.

+ Parameters

    + id (string) - Application name.

+ Request

    + Headers

            Content-Type: application/json

+ Response 200

    + Headers

            Content-Type: application/json

    + Body

            {
                "creation_date": "2016-11-02T09:12:09+00:00",
                "forum_url": "logbook",
                "latest_release_date": "2016-11-02T09:12:10+00:00",
                "title": "Log Book Application",
                "trial_period": 10,
                "type": "project"
            }

### List Apps [GET]
Lists all applications in Mergado.

+ Request

    + Headers

            Content-Type: application/json

+ Response 200

    + Headers

            Content-Type: application/json

    + Body

            {
                "data": [
                    {
                        "creation_date": "2016-11-02T09:12:09+00:00",
                        "forum_url": "bidding-fox",
                        "latest_release_date": "2016-11-02T09:12:10+00:00",
                        "title": "Bidding Fox",
                        "trial_period": 10,
                        "type": "project"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Billing [/users/{id}/billing/]
Billing is need for automatically billing via Fakturoid.

+ Attributes

    + user_id (string) - User identification number.
    + currency (string) - Currency of all services and applications.
    + total_current_price (number) - Price which will appear in invoice.
    + total_retail_price (number) - Standart price of services or applications.
    + services (object) - Informations about paymants of shops.
        + currency (string) - Currency of all services.
        + total_current_price (number) - Price which will appear in invoice of all shops.
        + total_retail_price (number) - Standart price of all services.
        + shops (array) - All shops for billing.
            + (object)
                + shop_id (string) - Shop identification number.
                + current_price (number) - Price of shop on invoice.
                + retail_price (number) - Standard price of shop.
                + in_trial_until (number) - Until how long is eshop in trial.
                + is_prepaid_until (number) - Until how long is eshop prepaid.
    + apps (object) - Informations about payments of applications.
        + currency (string) - Currency of all applications.
        + total_current_price (number) - Price will appear in invoice of all applications.
        + total_retail_price (number) - Standard price of all applications.
        + apps (array) - All applications for billing.
            + (object)
                + app_name (string) - Application name.
                + instance_id (number) - Instance of application.
                + current_price (number) - Price of application on invoice.
                + retail_price (number) - Standard price of application.
                + in_trial_until (string) - Until how long is application in trial.
                + is_prepaid_until (string) - Until how long is application prepaid.
                + entity_type (enum[string]) - What is type of application.
                    + Members
                        + user
                        + shop
                        + project
                + entity_id (number) - ID of the entity which application is bound to. Entity can be user or eshop or project.
                + is_old (boolean) - If application is new od old.


### Get User Billing [GET /users/{id}/billing/]
Returns whole billing details for given user.

**OAuth2 Scope:** user.billing.read

+ Parameters

    + id (string) - User ID.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body

            {
                "user_id": "1",
                "apps": {
                    "currency": "CZK",
                    "total_current_price": 999.4,
                    "total_retail_price": 888.5,
                    "apps": [
                        {
                            "app_name": "application_name",
                            "instance_id": 1,
                            "current_price": 777.1,
                            "retail_price": 666.2,
                            "in_trial_until": "2017-00-15",
                            "is_prepaid_until": "2017-04-20",
                            "app_type": "user",
                            "subject_id": 1,
                            "is_old": true
                        }
                    ]
                },
                "services": {
                    "currency": "CZK",
                    "total_current_price": 999.4,
                    "total_retail_price": 888.5,
                    "shops": [
                        {
                            "current_price": 678.9,
                            "in_trial_until": "1970-01-01",
                            "is_prepaid_until": "2017-04-20",
                            "retail_price": 56.7,
                            "shop_id": "3"
                        }
                    ]
                },
                "currency": "CZK",
                "total_current_price": 1234.5,
                "total_retail_price": 1234.5
            }

## Users [/users/{?limit,offset,fields}]
Users with an account in Mergado.

+ Attributes

    + id (string) - User's ID.
    + first_name (string) - User's first name.
    + last_name (string) - User's last name.
    + name (string) - User's full name.
    + username (string) - User's login.
    + email (string) - User's email address.
    + city (string, optional) - User's city.
    + company (string, optional) - User's company.
    + country (string, optional) - Country code in ISO 3166-1.
    + postcode (string, optional) - User's postal code.
    + street (string, optional) - User's street.
    + timezone (string, optional) - User's timezone.
    + timezone_offset (string, optional) - Timezone offset.
    + dic (string, optional) - VAT identification number.
    + ico (string, optional) - Taxpayer identification number.
    + fakturoid_id (string, optional) - ID for connection with [fakturoid.cz](https://fakturoid.cz).
    + invoice_months (number, optional) - Number of months to be invoiced for Mergado.
    + last_access (string) - Datetime of user's last access to Mergado.
    + locale (string) - User's locale in ISO 15897.
    + registered_at (string) - Datetime of registration.
    + send_summary (boolean) - Whether the user wants to receive a summary about their eshops/exports.

### List Users [GET]
Lists all users the authenticated client has access to.

**OAuth2 Scope:** user.read

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "limit": 10,
                "offset": 0,
                "data": [
                    {
                        "id": "6",
                        "first_name": "Lorem",
                        "last_name": "Ipsum",
                        "name": "Lorem Ipsum",
                        "username": "loremipsum",
                        "email": "lorem.ipsum@example.com",
                        "city": "Brno",
                        "company": "Mergado",
                        "country": "cz",
                        "dic": "00000000",
                        "ico": "00000000",
                        "fakturoid_id": null,
                        "invoice_months": 1,
                        "last_access": "2016-03-21T16:32:32+00:00",
                        "locale": "cs_CZ",
                        "postcode": "61200",
                        "registered_at": "2015-11-03T16:08:17+00:00",
                        "street": "Palackého 123/456",
                        "timezone": "Europe/Prague",
                        "timezone_offset": null,
                        "send_summary": false
                    }
                ]
            }

### Authenticated User [GET /me/{?fields}]
Returns currently authenticated user.

**OAuth2 Scope:** user.read

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "6",
                "first_name": "Lorem",
                "last_name": "Ipsum",
                "name": "Lorem Ipsum",
                "username": "loremipsum",
                "email": "lorem.ipsum@example.com",
                "city": "Brno",
                "company": "Mergado",
                "country": "cz",
                "dic": "00000000",
                "ico": "00000000",
                "fakturoid_id": null,
                "invoice_months": 1,
                "last_access": "2016-03-21T16:32:32+00:00",
                "locale": "cs_CZ",
                "postcode": "61200",
                "registered_at": "2015-11-03T16:08:17+00:00",
                "street": "Palackého 123/456",
                "timezone": "Europe/Prague",
                "timezone_offset": null,
                "send_summary": false
            }

### Get User [GET /users/{id}/{?fields}]
Returns a user.

**OAuth2 Scope:** user.read

+ Parameters

    + id (string) - ID of a user.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "6",
                "first_name": "Lorem",
                "last_name": "Ipsum",
                "name": "Lorem Ipsum",
                "username": "loremipsum",
                "email": "lorem.ipsum@example.com",
                "city": "Brno",
                "company": "Mergado",
                "country": "cz",
                "dic": "00000000",
                "ico": "00000000",
                "fakturoid_id": null,
                "invoice_months": 1,
                "last_access": "2016-03-21T16:32:32+00:00",
                "locale": "cs_CZ",
                "postcode": "61200",
                "registered_at": "2015-11-03T16:08:17+00:00",
                "street": "Palackého 123/456",
                "timezone": "Europe/Prague",
                "timezone_offset": null,
                "send_summary": false
            }

### Get User Permissions [GET /users/{id}/permissions/{?limit,offset,fields}]
Lists all permissions (accesses to eshops) of a specific user.

**OAuth2 Scope:** user.shops.read

+ Parameters

    + id (string) - ID of a user.

+ Response 200

    + Attributes
        + shop_id (string) - ID of the shop the role relates to.
        + role (enum[string]) - User's role.
            + members
                + `writer`
                + `reader`

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "role": "writer",
                        "shop_id": "1"
                    },
                    {
                        "role": "writer",
                        "shop_id": "10"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Eshops [/users/{id}/shops/{?limit,offset,fields}]
Eshops in Mergado.

+ Attributes

    + id (string) - ID of the shop.
    + owner_id (string) - ID of the user who is the owner of the shop in Mergado
      (that is usualy the user who created the eshop).
    + tariff_id (string) - ID of the tariff the eshop has ordered.
    + tariff_validity (string) - Datetime when the tariff expires.
    + web (string) - Web sites of the eshop.
    + name (string) - Unique name of the eshop.
    + xml_domain (string) - XML domain of the eshop as detected from an XML feed.
    + exported_items (number) - Sum of exported items in all exports.
    + created_at (string) - Datetime when the export was created.
    + permissions - List of users and roles with access to the eshop.

### List User Eshops [GET]
Returns eshops the user can access.

**OAuth2 Scope:** user.shops.read

+ Parameters

    + id (string) - ID of a user.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "limit": 10,
                "offset": 0,
                "data": [
                    {
                        "id": "1",
                        "owner_id": "1",
                        "tariff_id": "7",
                        "tariff_validity": "2015-12-01T10:02:51+00:00",
                        "name": "Example.com",
                        "web": "http://example.com/",
                        "xml_domain": "example.com",
                        "exported_items": 256,
                        "created_at": "2015-11-04T12:31:18+00:00",
                        "permissions": [
                            {
                                "role": "reader",
                                "user_id": "2"
                            }
                        ]
                    }
                ]
            }

### Get an Eshop [GET /shops/{id}/{?fields}]
Returns an eshop with the given ID.

**OAuth2 Scope:** shop.read

+ Parameters

    + id (string) - ID of a shop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "1",
                "owner_id": "1",
                "tariff_id": "7",
                "tariff_validity": "2015-12-01T10:02:51+00:00",
                "name": "Example.com",
                "web": "http://example.com/",
                "xml_domain": "example.com",
                "exported_items": 256,
                "created_at": "2015-11-04T12:31:18+00:00",
                "permissions": [
                    {
                        "role": "reader",
                        "user_id": "2"
                    }
                ]
            }

### Update an Eshop [PATCH /shops/{id}/{?fields}]
Updates an eshop with the given ID.

**OAuth2 Scope:** shop.write

+ Parameters

    + id (string) - ID of a shop.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "Mergado.cz",
                "web": "http://mergado.cz/",
                "xml_domain": "mergado.cz"
            }

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "1",
                "owner_id": "1",
                "tariff_id": "7",
                "tariff_validity": "2015-12-01T10:02:51+00:00",
                "name": "Mergado.cz",
                "web": "http://mergado.cz/",
                "xml_domain": "mergado.cz",
                "exported_items": 256,
                "created_at": "2015-11-04T12:31:18+00:00",
                "permissions": [
                    {
                        "role": "reader",
                        "user_id": "2"
                    }
                ]
            }

### Show Eshop Info [GET /shops/{id}/info/{?fields}]
Show additional eshop information and statistics.

**Oauth2 Scope:** shop.read

+ Parameters

    + id (string) - ID of an eshop.

+ Response 200

    + Attributes
        + number_of_projects (number) - Number of exports (projects) created in this eshop.
        + stats_collection (object) - Information about last collection of statistics.
            + status (enum[string])
                + members
                    + done
                    + in_progress
                    + error
            + error (string)
            + started_at (string)
            + finished_at (string)
            + info (array)
                + (object)
                    + type (enum[string])
                        + members
                            + mergado.output_feed
                            + mergado.costs_feed
                            + heureka.conversions_feed
                            + heureka.sortiment_feed
                            + mergado.report
                    + status (enum[string])
                        + members
                            + done
                            + in_progress
                            + error
                    + error (string)
                    + started_at (string)
                    + finished_at (string)
        + connections (array) - List of objects representing connections to third-party services.
            + (object)
                + name (enum[string]) - Name of the service.
                    + members
                        + heureka.cz
                        + heureka.sk
                        + zbozi.cz
                        + srovname.cz
                        + hledejceny.cz
                        + google_analytics
                + currency (string) - Currency in ISO 4217 or a `null` if the currency is not known.
                + status (enum[string]) - Status of the connection.
                    + members
                        + ok
                        + error
                + error (string) - Short description of the error (if status is not `ok`).
                + info (object) - Additional info about the connection.
                    + name (string) - Name of the connection (account's name, eshop's name and so on).
                    + valid_credentials (boolean) - Whether the credentials the user supplied are valid.
                    + ... - Other fields specific for each connection.

    + Headers

            Content-Type: application/json
    
    + Body
    
            {
                "number_of_projects": 3,
                "stats_collection": {
                    "status": "done",
                    "error": null,
                    "started_at": "2015-11-04T12:31:18+00:00",
                    "finished_at": "2015-11-04T14:31:18+00:00",
                    "info": [
                        {
                            "status": "done",
                            "finished_at": "2017-10-20T04:53:11+00:00",
                            "started_at": "2017-10-20T04:50:03+00:00",
                            "type": "heureka.conversions_feed",
                            "error": null
                        },
                        {
                            "status": "done",
                            "finished_at": "2017-10-20T04:51:53+00:00",
                            "started_at": "2017-10-20T04:50:03+00:00",
                            "type": "mergado.output_feed",
                            "error": null
                        },
                        {
                            "status": "done",
                            "finished_at": "2017-10-20T05:33:57+00:00",
                            "started_at": "2017-10-20T04:50:03+00:00",
                            "type": "mergado.report",
                            "error": null
                        },
                        {
                            "status": "done",
                            "finished_at": "2017-10-20T05:33:45+00:00",
                            "started_at": "2017-10-20T04:50:03+00:00",
                            "type": "heureka.sortiment_feed",
                            "error": null
                        }
                    ]
                },
                "connections": [
                    {
                        "currency": "EUR",
                        "name": "heureka.sk",
                        "status": "ok",
                        "error": null,
                        "info": {
                            "name": "Example.com",
                            "valid_credentials": true,
                            "heureka_id": "321",
                            "username": "test@example.com",
                            "url_slug": "example-com"
                        }
                    },
                    {
                        "currency": "CZK",
                        "name": "zbozi.cz",
                        "status": "error",
                        "error": "zbozi_auth_error",
                        "info": {
                            "name": "Example.com",
                            "valid_credentials": false,
                            "zbozi_id": "123",
                            "username": "test@example.com"
                        }
                    },
                    {
                        "currency": null,
                        "name": "google_analytics",
                        "status": "ok",
                        "error": null,
                        "info": {
                            "name": "Example.com",
                            "valid_credentials": true,
                            "credentials_id": "325",
                            "account_id": "193",
                            "profile_id": "796"
                        }
                    }
                ]
            }


## Projects [/shops/{id}/projects/{?limit,offset,fields}]
Project is created when a user imports an XML feed in Mergado. This feed may come in different formats
and it is very common that one eshop has several projects each maaged for a different shopping service.

+ Attributes

    + id (string) - ID of the project (or sometimes called export).
    + shop_id (string) - Eshop ID.
    + creator_id (string) - ID of the user who created this project.
    + name (string) - Name of the project.
    + url (string) - URL of the XML feed with products.
    + activated (boolean) - Whether the project is active or not.
    + created (string) - When the project was created.
    + exported_items (number) - Number of exported items in the last export of the project.
    + input_fomat (string) - Input format (e.g. heureka.cz, zbozi.cz).
    + output_format (string) - Output format.
    + pairing_elements (string) - List of pairing elements (used for sychronization of XML feed).
    + readonly (boolean) - If the project is set to readonly, import of XML feed is forbidden,
      rules cannot be applied, export is skipped.
    + is_paused (boolean) - If the project is paused, automatic scheduled rebuilds are skipped.
    + rules_changed_at (string) - The last time someone created, deleted or updated a rule in the project.
    + slug (string) - Unique identifier used in output URL of the exported XML feed.
    + turned_off (boolean) - Whether the project was turned off or not.
    + update_period (number) - Update period of the project (how often to run import of the input XML feed).
    + last_access (string) - Last access to the project by a user.
    + xml_synced_at (string) - The last time an input feed was imported.
    + xml_updated_at (string) - The last time the project was updated by a change in the input XML feed.
    + is_dirty (boolean) - Dirty project means that during the next rebuild of the project, all rules to
      all products will be applied.

### List Shop Projects [GET]
Returns projects of an eshop.

**OAuth2 Scope:** shop.projects.read

+ Parameters

    + id (string) - ID of a shop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "limit": 10,
                "offset": 0,
                "data": [
                    {
                        "id": "8",
                        "shop_id": "1",
                        "creator_id": "1",
                        "name": "Billiger.de",
                        "url": "https://app.mergado.com/example-com.xml",
                        "activated": true,
                        "created": "2015-11-11T15:42:33+00:00",
                        "exported_items": 0,
                        "input_format": "zbozi.cz",
                        "output_format": "billiger.de",
                        "pairing_elements": "URL",
                        "readonly": false,
                        "is_paused": false,
                        "rules_changed_at": "2015-11-11T15:43:07+00:00",
                        "slug": "example-com-heureka-cz-asdf",
                        "turned_off": true,
                        "update_period": 14400,
                        "last_access": "2015-12-10T12:51:59+00:00",
                        "xml_synced_at": "2015-11-18T13:19:59+00:00",
                        "xml_updated_at": "2015-11-11T15:42:50+00:00",
                        "is_dirty": false
                    }
                ]
            }

### Get a Project [GET /projects/{id}/{?fields}]
Returns a project with the given ID.

**OAuth2 Scope:** project.read

+ Parameters

    + id (string) - ID of a project.Re

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "8",
                "shop_id": "1",
                "creator_id": "1",
                "name": "Billiger.de",
                "url": "https://dummy.mergado.com/example-com.xml",
                "activated": true,
                "created": "2015-11-11T15:42:33+00:00",
                "exported_items": 0,
                "input_format": "zbozi.cz",
                "output_format": "billiger.de",
                "pairing_elements": "URL",
                "readonly": false,
                "is_paused": false,
                "rules_changed_at": "2015-11-11T15:43:07+00:00",
                "slug": "example-com-heureka-cz-asdf",
                "turned_off": true,
                "update_period": 14400,
                "last_access": "2015-12-10T12:51:59+00:00",
                "xml_synced_at": "2015-11-18T13:19:59+00:00",
                "xml_updated_at": "2015-11-11T15:42:50+00:00"
                "is_dirty": false
            }

### Update a Project [PATCH /projects/{id}/{?fields}]
Updates a project with the given ID.

**Note:** Currently, it is possible tu update only the field `is_dirty` which can be used
to force Mergado to apply all rules to products during the next (lazy) rebuild.

**OAuth2 Scope:** project.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "is_dirty": true
            }

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "8",
                "shop_id": "1",
                "creator_id": "1",
                "name": "Billiger.de",
                "url": "https://dummy.mergado.com/example-com.xml",
                "activated": true,
                "created": "2015-11-11T15:42:33+00:00",
                "exported_items": 0,
                "input_format": "zbozi.cz",
                "output_format": "billiger.de",
                "pairing_elements": "URL",
                "readonly": false,
                "is_paused": false,
                "rules_changed_at": "2015-11-18T13:20:21+00:00",
                "slug": "example-com-heureka-cz-asdf",
                "turned_off": true,
                "update_period": 14400,
                "last_access": "2015-12-10T12:51:59+00:00",
                "xml_synced_at": "2015-11-18T13:19:59+00:00",
                "xml_updated_at": "2015-11-11T15:42:50+00:00"
                "is_dirty": true
            }

### Show Project Info [GET /projects/{id}/info/]
Show additional project information and statistics.

**Oauth2 Scope:** project.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Attributes
        + number_of_elements (number) - Number of elements in the project.
        + metadata (object) - Specific data for the project that were entered by the user or loaded from an input feed. For example:
          + stats_ga_source (string) - Google Analytics `ga:source` parameter. Identify the advertiser, site, publication, etc. that is sending traffic to your property, for example: google, newsletter4, billboard.
          + stats_ga_medium (string) - Google Analytics `ga:medium` parameter. The advertising or marketing medium, for example: cpc, banner, email newsletter.
          + generator (string) - Application which generated the input feed.

    + Headers

            Content-Type: application/json
    
    + Body
    
            {
                "metadata": {
                    "stats_ga_medium": "agregator", 
                    "stats_ga_source": "heureka.*.",
                    "generator": "mergado.magento.marketingpack.0_1"
                }, 
                "number_of_elements": 28
            }

## Products [/projects/{id}/products/{?limit,offset,fields}]
A products represents one item in an XML feed.

+ Attributes

    + id (string) - ID of the product.
    + output_changed_at (string) - The last time output data (values of elements)
      of this product changed.
    + updated_at (string) - The last time input data of this product changed.
    + created_at (string) - The time the product was first seen in Mergado.
      Note that this field's value is a `null` for all products first seen
      before the date January 11, 2017.
    + data - Output data of this product.
    + input_data - Input data of this product.

### List Products [GET]
Returns project's products.

**OAuth2 Scope:** project.products.read

+ Parameters

    + id (string) - ID of a shop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "1693",
                        "output_changed_at": null,
                        "updated_at": "2016-04-28T17:18:50+00:00",
                        "created_at": "2016-03-27T17:18:45+00:00",
                        "data": {
                            "CATEGORYTEXT": "Tonery do tiskáren > Kompatibilní tonery",
                            "DELIVERY_DATE": "0",
                            "DESCRIPTION": "Toner HP Q7551X",
                            "DUES": "0",
                            "IMGURL": "http://www.example.com/img/755.jpg",
                            "MANUFACTURER": "PIRANHA",
                            "PRICE": "808.18",
                            "PRODUCT": "Toner HP Q7551X",
                            "URL": "http://www.comps.cz/toner-hp-755",
                            "VAT": "21.0"
                        },
                        "input_data": {
                            "CATEGORYTEXT": "Tonery do tiskáren | Kompatibilní tonery",
                            "DELIVERY_DATE": "0",
                            "DESCRIPTION": "Toner HP Q7551X",
                            "DUES": "3",
                            "IMGURL": "http://www.example.com/img/755.jpg",
                            "MANUFACTURER": "PIRANHA",
                            "PRICE": "808.18",
                            "PRODUCT": "Toner HP Q7551X",
                            "URL": "http://www.comps.cz/toner-hp-755",
                            "VAT": "21.0"
                        }
                    },
                    {
                        "id": "1694",
                        "output_changed_at": null,
                        "updated_at": "2016-04-28T17:18:50+00:00",
                        "created_at": "2016-03-27T17:18:45+00:00",
                        "data": {
                            "CATEGORYTEXT": "Tonery do tiskáren > Kompatibilní tonery",
                            "DELIVERY_DATE": "0",
                            "DESCRIPTION": "Toner HP Q7532X",
                            "DUES": "0",
                            "IMGURL": "http://www.example.com/img/7532.jpg",
                            "MANUFACTURER": "PIRANHA",
                            "PRICE": "848.18",
                            "PRODUCT": "Toner HP Q7532X",
                            "URL": "http://www.comps.cz/toner-hp-7532",
                            "VAT": "21.0"
                        },
                        "input_data": {
                            "CATEGORYTEXT": "Tonery do tiskáren | Kompatibilní tonery",
                            "DELIVERY_DATE": "0",
                            "DESCRIPTION": "Toner HP Q7532X",
                            "DUES": "0",
                            "IMGURL": "http://www.example.com/img/7532.jpg",
                            "MANUFACTURER": "PIRANHA",
                            "PRICE": "848.18",
                            "PRODUCT": "Toner HP Q7532X",
                            "URL": "http://www.comps.cz/toner-hp-7532",
                            "VAT": "21.0"
                        }
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get a Product [GET /products/{id}/{?fields}]
Returns a product with the given ID.

**OAuth2 Scope:** project.products.read

+ Parameters

    + id (string) - ID of a product.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "1693",
                "output_changed_at": null,
                "updated_at": "2016-04-28T17:18:50+00:00",
                "created_at": "2016-03-27T17:18:45+00:00",
                "data": {
                    "CATEGORYTEXT": "Tonery do tiskáren > Kompatibilní tonery",
                    "DELIVERY_DATE": "0",
                    "DESCRIPTION": "Toner HP Q7551X",
                    "DUES": "0",
                    "IMGURL": "http://www.example.com/img/755.jpg",
                    "MANUFACTURER": "PIRANHA",
                    "PRICE": "808.18",
                    "PRODUCT": "Toner HP Q7551X",
                    "URL": "http://www.comps.cz/toner-hp-755",
                    "VAT": "21.0"
                },
                "input_data": {
                    "CATEGORYTEXT": "Tonery do tiskáren | Kompatibilní tonery",
                    "DELIVERY_DATE": "0",
                    "DESCRIPTION": "Toner HP Q7551X",
                    "DUES": "0",
                    "IMGURL": "http://www.example.com/img/755.jpg",
                    "MANUFACTURER": "PIRANHA",
                    "PRICE": "808.18",
                    "PRODUCT": "Toner HP Q7551X",
                    "URL": "http://www.comps.cz/toner-hp-755",
                    "VAT": "21.0"
                }
            }

### Update a Product [PATCH /products/{id}/{?fields}]
Updates a product with the given ID.

**Note:** Currently, it is possible tu update only the field `updated_at` which can be used
to force Mergado to refresh the product (apply rules) during the next (lazy) rebuild.

**OAuth2 Scope:** project.products.write

+ Parameters

    + id (string) - ID of a product.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "updated_at": "2017-05-21T00:00:00+00:00"
            }

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "1693",
                "output_changed_at": null,
                "updated_at": "2017-05-21T00:00:00+00:00",
                "created_at": "2016-03-27T17:18:45+00:00",
                "data": {
                    "CATEGORYTEXT": "Tonery do tiskáren > Kompatibilní tonery",
                    "DELIVERY_DATE": "0",
                    "DESCRIPTION": "Toner HP Q7551X",
                    "DUES": "0",
                    "IMGURL": "http://www.example.com/img/755.jpg",
                    "MANUFACTURER": "PIRANHA",
                    "PRICE": "808.18",
                    "PRODUCT": "Toner HP Q7551X",
                    "URL": "http://www.comps.cz/toner-hp-755",
                    "VAT": "21.0"
                },
                "input_data": {
                    "CATEGORYTEXT": "Tonery do tiskáren | Kompatibilní tonery",
                    "DELIVERY_DATE": "0",
                    "DESCRIPTION": "Toner HP Q7551X",
                    "DUES": "0",
                    "IMGURL": "http://www.example.com/img/755.jpg",
                    "MANUFACTURER": "PIRANHA",
                    "PRICE": "808.18",
                    "PRODUCT": "Toner HP Q7551X",
                    "URL": "http://www.comps.cz/toner-hp-755",
                    "VAT": "21.0"
                }
            }

### Query Products [GET /queries/{id}/products/{?limit,offset,fields}]
Returns products that satisfy a condition defined by the given query.

**OAuth2 Scope:** projects.products.read

+ Parameters

    + id (string) - ID of the query.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body  
    
            {
                "data": [
                    {
                        "id": "3838",
                        "output_changed_at": "2016-04-25T17:20:44+00:00",
                        "updated_at": "2016-04-25T16:42:50+00:00",
                        "created_at": "2016-03-27T17:18:45+00:00",
                        "data": {
                            "CATEGORYTEXT": "Text kategorie",
                            "DELIVERY_DATE": "0",
                            "DELIVERY_PRICE_COD|DHL": "5.90",
                            "DELIVERY_PRICE_COD|SLOVENSKA_POSTA": "3.90",
                            "DELIVERY_PRICE|DHL": "4.90",
                            "DELIVERY_PRICE|SLOVENSKA_POSTA": "2.90",
                            "DESCRIPTION": "Popis produktu",
                            "GIFT": "Zľavový kupón na ďalší nákup",
                            "HEUREKA_CPC": null,
                            "IMGURL": "http://www.obrazok.sk/obrazok.jpg",
                            "ITEM_ID": "766",
                            "MANUFACTURER": "Vyrobca",
                            "PRICE_VAT": "25.39",
                            "PRODUCT": "Vyrobok",
                            "PRODUCTNAME": "Nayov vzrobku",
                            "URL": "http://www.url.cz/prevyrobok/",
                            "VAT": "0.21"
                        },
                        "input_data": {
                            "CATEGORYTEXT": "Text kategorie",
                            "DELIVERY_DATE": "0",
                            "DELIVERY_PRICE_COD|DHL": "5.90",
                            "DELIVERY_PRICE_COD|SLOVENSKA_POSTA": "3.90",
                            "DELIVERY_PRICE|DHL": "4.90",
                            "DELIVERY_PRICE|SLOVENSKA_POSTA": "2.90",
                            "DESCRIPTION": "Popis produktu",
                            "GIFT": "Zľavový kupón na ďalší nákup",
                            "HEUREKA_CPC": null,
                            "IMGURL": "http://www.obrazok.sk/obrazok.jpg",
                            "ITEM_ID": "766",
                            "MANUFACTURER": "Vyrobca",
                            "PRICE_VAT": "25.39",
                            "PRODUCT": "Vyrobok",
                            "PRODUCTNAME": "Nayov vzrobku",
                            "URL": "http://www.url.cz/prevyrobok/",
                            "VAT": "0.21"
                        }
                    },
                    {
                        "id": "3839",
                        "output_changed_at": "2016-04-25T17:20:44+00:00",
                        "updated_at": "2016-04-25T16:42:50+00:00",
                        "created_at": "2016-03-27T17:18:45+00:00",
                        "data": {
                            "CATEGORYTEXT": "Text kategorie",
                            "DELIVERY_DATE": "0",
                            "DELIVERY_PRICE_COD|DHL": "5.90",
                            "DELIVERY_PRICE_COD|SLOVENSKA_POSTA": "3.90",
                            "DELIVERY_PRICE|DHL": "4.90",
                            "DELIVERY_PRICE|SLOVENSKA_POSTA": "2.90",
                            "DESCRIPTION": "Popis produktu",
                            "GIFT": "Zľavový kupón na ďalší nákup",
                            "HEUREKA_CPC": null,
                            "IMGURL": "http://www.obrazok.sk/obrazok.jpg",
                            "ITEM_ID": "766",
                            "MANUFACTURER": "Vyrobca",
                            "PRICE_VAT": "25.39",
                            "PRODUCT": "Vyrobok",
                            "PRODUCTNAME": "Nayov vzrobku",
                            "URL": "http://www.url.cz/prevyrobok/",
                            "VAT": "0.21"
                        },
                        "input_data": {
                            "CATEGORYTEXT": "Text kategorie",
                            "DELIVERY_DATE": "0",
                            "DELIVERY_PRICE_COD|DHL": "5.90",
                            "DELIVERY_PRICE_COD|SLOVENSKA_POSTA": "3.90",
                            "DELIVERY_PRICE|DHL": "4.90",
                            "DELIVERY_PRICE|SLOVENSKA_POSTA": "2.90",
                            "DESCRIPTION": "Popis produktu",
                            "GIFT": "Zľavový kupón na ďalší nákup",
                            "HEUREKA_CPC": null,
                            "IMGURL": "http://www.obrazok.sk/obrazok.jpg",
                            "ITEM_ID": "766",
                            "MANUFACTURER": "Vyrobca",
                            "PRICE_VAT": "25.39",
                            "PRODUCT": "Vyrobok",
                            "PRODUCTNAME": "Nayov vzrobku",
                            "URL": "http://www.url.cz/prevyrobok/",
                            "VAT": "0.21"
                        }
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Update products [PATCH /queries/{id}/products/{?fields}]
Updates products matching a query.

**Note:** Currently, it is possible tu update only the field `updated_at` which can be used
to force Mergado to refresh the products (apply rules) during the next (lazy) rebuild.

**OAuth2 Scope:** project.products.write

+ Parameters

    + id (string) - ID of a product.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "updated_at": "2017-05-21T00:00:00+00:00"
            }

+ Response 204

## Elements [/projects/{id}/elements/]
Elements are named attributes of products.

+ Attributes

    + id (string) - ID of the element.
    + project_id (string) - ID of the project in which the element created.
    + name (string) - Name of the element.
    + type (enum[string]) - Type of the element.
        + members
            + input
            + manual
            + from_rule
            + special
    + hidden (boolean) - Whether the product is hidden or not. Elements
      can be hidden by a user or a hiding rule.

### Create an Element [POST]
Creates an element inside a project.

**OAuth2 Scope:** project.elements.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "SHIPPING",
                "hidden": false
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/elements/123"

    + Body
    
            {
                "id": "123",
                "project_id": "1",
                "name": "SHIPPING",
                "type": "output",
                "hidden": false
            }

### List Project Elements [GET /projects/{id}/elements/{?limit,offset,fields}]
Lists all project's elements.

**OAuth2 Scope:** project.elements.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "hidden": false,
                        "id": "1",
                        "name": "PRODUCT",
                        "project_id": "33",
                        "type": "input"
                    },
                    {
                        "hidden": false,
                        "id": "2",
                        "name": "DESCRIPTION",
                        "project_id": "33",
                        "type": "input"
                    },
                    {
                        "hidden": false,
                        "id": "4",
                        "name": "URL",
                        "project_id": "33",
                        "type": "input"
                    },
                    {
                        "hidden": false,
                        "id": "5",
                        "name": "CATEGORYTEXT",
                        "project_id": "33",
                        "type": "input"
                    },
                    {
                        "hidden": false,
                        "id": "6",
                        "name": "PRICE",
                        "project_id": "33",
                        "type": "input"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get an Element [GET /elements/{id}/{?fields}]
Returns an element.

**OAuth2 Scope:** project.elements.read

+ Parameters

    + id (string) - ID of an element.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "hidden": false,
                "id": "6",
                "name": "PRICE",
                "project_id": "33",
                "type": "input"
            }

### Delete an Element [DELETE /elements/{id}/{?fields}]
Delete the specified element.

**OAuth2 Scope:** project.elements.write

+ Parameters

    + id (string) - ID of an element.

+ Request

    + Headers

            Accept: application/json

+ Response 204

    + Headers

            Content-Type: application/json

### Update an Element [PATCH /elements/{id}/]
Performes update of element's attributes.

**OAuth2 Scope:** project.elements.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "hidden": true
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/elements/123"

    + Body
    
            {
                "id": "123",
                "project_id": "1",
                "name": "SHIPPING",
                "type": "output",
                "hidden": true
            }

## Variables [/project/{id}/variables/]
Variables can be seen as pointers to products' values or parts of values and
can be used in most _rules_ (see the section about rules). Variables are created
automatically during import and in the UI (but not in the API) when an element
is created. However, they can be also created by users who can use a regular
expression to match only a part of a product's value.

+ Attributes

    + id (string) - ID of the variable.
    + name (string) - Name of the variable.
    + project_element_id (string) - ID of the element the variable is created from.
    + project_id (string) - ID of the project the variable is created in.
    + regular_expression (string, optional) - Regular expression used for
      parsing some part of an element's value (for example domain from URL).
    + fragment_number (number, optional) - Fragment or group number to match
      from given regular expression.
    + sample_text (string, optional) - Sample text used for the regular
      expression. This is visible in the UI so that a user can immediately
      see the result of the regular expression.
    + type (enum[string]) - Type of the variable, whether it was created
      automatically as a pair to input elements, or manually by a user or in API.
        + members
            + input
            + manual

### Create a Variable [POST]
Creates a new variable inside a project.

**OAuth2 Scope:** project.variables.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "DESCRIPTION_A",
                "project_element_id": "1",
                "regular_expression": "(\\-|\\* )?(.*)",
                "sample_text": null,
                "fragment_number": 2
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/variables/1521/"

    + Body
    
            {
                "id": "1521",
                "name": "DESCRIPTION_A",
                "project_element_id": "1",
                "project_id": "33",
                "regular_expression": "(\\-|\\* )?(.*)",
                "fragment_number": 2,
                "sample_text": null,
                "type": "manual"
            }

### List Project Variables [GET /projects/{id}/variables/{?limit,offset,fields}]
Lists all project's variables.

**OAuth2 Scope:** project.variables.read

+ Parameters

    + id (string) - ID of a variable.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "1521",
                        "name": "DESCRIPTION_A",
                        "project_element_id": "1",
                        "project_id": "33",
                        "regular_expression": "(\\-|\\* )?(.*)",
                        "fragment_number": 2,
                        "sample_text": null,
                        "type": "manual"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get a Variable [GET /variables/{id}/{?fields}]
Returns a variable.

**OAuth2 Scope:** project.variables.read

+ Parameters

    + id (string) - ID of a variable.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "id": "1521",
                "name": "DESCRIPTION_A",
                "project_element_id": "1",
                "project_id": "33",
                "regular_expression": "(\\-|\\* )?(.*)",
                "fragment_number": 2,
                "sample_text": null,
                "type": "manual"
            }

### Delete a Variable [DELETE /variables/{id}/{?fields}]
Delete the specified variable.

**OAuth2 Scope:** project.variables.write

+ Parameters

    + id (string) - ID of a variable.

+ Request

    + Headers

            Accept: application/json

+ Response 204

    + Headers

            Content-Type: application/json

### Update a Variable [PATCH /variables/{id}/]
Performes update of variable's attributes.

**OAuth2 Scope:** project.variables.write

+ Parameters

    + id (string) - ID of a variable.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "DESCRIPTION_OMG"
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/variables/1521"

    + Body
    
            {
                "id": "1521",
                "name": "DESCRIPTION_OMG",
                "project_element_id": "1",
                "project_id": "33",
                "regular_expression": "(\\-|\\* )?(.*)",
                "fragment_number": 2,
                "sample_text": null,
                "type": "manual"
            }

## Rules [/projects/{id}/rules/]
API for rule management, definition and application. Rules are probably the most important feature
in Mergado. They allow users to modify their XML feeds or can be used to convert a feed to a different
format (e.g. from Heureka.cz to Google Merchant).

+ Attributes

    + id (string) - ID of the rule.
    + name (string) - Name of the rule (is shown in Mergado UI).
    + type (string) - Type of the rule.
    + project_id (string) - ID of the project the rule was created in.
    + project_element_id (string, optional) - ID of the element the rule
      should apply to. The element is optional, not all rules require an element.
    + priority (number) - Priority of the rule, or the position when it is applied.
      The position matters as each rule makes some changes to the products' data.
    + applies (boolean) - Whether the rule is turned on or off.
    + is_deletable (boolean) - Whether the user is allowed to delete the rule.
    + is_movable (boolean) - Whether the user is allowed to change position
      the rule.
    + is_editable (boolean) - Whether the user is allowed to edit the rule.
    + is_pausable (boolean) - Whether the user is allowed to pause the rule.
    + data - Parameters of the rule, some rules accept parameters, e.g.
      a value to write into an element, regular expressions, etc.
    + queries (array) - It is possible to control to what products each rule applies.
      Queries exists for exactly this purpose. If no query is specified,
      the rule will be applied to all products.

### Create a Rule [POST]
Creates a new rule inside the specified project. 

There are two ways how to specify priority. You can either use the *placement* parameter and specify 
the id of the rule that the newly created one is supposed to **follow** or **precede**. 
Or you can set the *priority* value directly. Parameters *priority* and *placement* are optional, but at least
one of them must be specified.

Note that if there already is a rule with the given priority, the priority of the new rule will be adjusted 
so that the new rule follows the one with conflicting priority. Also note that *placement* is only regarded
when a rule is created or updated. Another rule may be placed between the created rule and the one it was originally
placed before / after later on.

To determine the priority on server side, we first check the value of *placement[after]*, 
then the value of *placement [before]* and lastly the value of *priority* itself.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "Cena",
                "type": "rewriting",
                "project_element_id": "5",
                "applies": true,
                "priority": "3",
                "placement": {
                    "after": "1"
                }
                "is_deletable": true,
                "is_movable": true,
                "is_editable": true,
                "is_pausable": true,
                "data": {
                    "new_content": "%CATEGORYTEXT%"
                },
                "queries": [
                    {
                        "id": "2"
                    }
                ]
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/15/"

    + Body
    
            {
                "id": "15",
                "name": "Cena",
                "type": "rewriting",
                "project_id": "1",
                "project_element_id": "5",
                "applies": true,
                "is_deletable": true,
                "is_movable": true,
                "is_editable": true,
                "is_pausable": true,
                "priority": "3.5",
                "data": {
                    "new_content": "%CATEGORYTEXT%"
                },
                "queries": [
                    {
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:05:14+00:00",
                        "id": "2",
                        "name": null,
                        "project_id": "33",
                        "query": "PRICE > 20",
                        "read_only": false,
                        "search_output": false
                    }
                ]
            }

+ Request

    + Headers
    
            Content-Type: application/json
    
    + Body
    
            {
                "name": "Cena 2 BATCH",
                "project_element_id": "5",
                "applies": true,
                "deletable": true,
                "priority": "3",
                "type": "batch_rewriting",
                "data": [
                    {
                        "position": 1,
                        "query_id": "4",
                        "value": "2.00"
                    },
                    {
                        "position": 2,
                        "query_id": "3",
                        "value": "1.00"
                    }
                ]
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/16/"

    + Body
    
            {
                "applies": true,
                "is_deletable": true,
                "is_movable": true,
                "is_editable": true,
                "is_pausable": true,
                "id": "39",
                "name": "Cena 2 BATCH",
                "priority": "3",
                "project_element_id": "5",
                "project_id": "33",
                "type": "batch_rewriting",
                "data": [
                    {
                        "position": 1,
                        "query_id": "4",
                        "value": "2.00"
                    },
                    {
                        "position": 2,
                        "query_id": "3",
                        "value": "1.00"
                    }
                ],
                "queries": [
                    {
                        "id": "1",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:02:42+00:00",
                        "name": "♥ALLPRODUCTS♥",
                        "project_id": "33",
                        "query": "",
                        "read_only": true,
                        "search_output": false
                    }
                ]
            }

### List Project Rules [GET /projects/{id}/rules/{?limit,offset,fields}]
Lists all rules' instances that were created inside the specified project.

**OAuth2 Scope:** project.rules.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "1",
                        "project_id": "1",
                        "project_element_id": null,
                        "applies": true,
                        "is_deletable": true,
                        "is_movable": true,
                        "is_editable": true,
                        "is_pausable": true,
                        "name": null,
                        "priority": "0",
                        "type": "format_converter"
                    },
                    {
                        "id": "15",
                        "project_id": "1",
                        "project_element_id": "5",
                        "applies": true,
                        "is_deletable": true,
                        "is_movable": true,
                        "is_editable": true,
                        "is_pausable": true,
                        "name": "Cena",
                        "priority": "3",
                        "type": "batch_rewriting"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get a Rule [GET /rules/{id}/{?fields}]
Returns a specific rule instance.

**OAuth2 Scope:** project.rules.read

+ Parameters

    + id (string) - ID of a rule.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "15",
                "project_id": "1",
                "project_element_id": "5",
                "applies": true,
                "is_deletable": true,
                "is_movable": true,
                "is_editable": true,
                "is_pausable": true,
                "name": "Cena",
                "priority": "3",
                "type": "rewriting",
                "data": {
                    "new_content": "%CATEGORYTEXT%"
                }
            }

### Delete a Rule [DELETE /rules/{id}/{?fields}]
Delete the specified rule.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + id (string) - ID of a rule.

+ Request

    + Headers

            Accept: application/json

+ Response 204

    + Headers

            Content-Type: application/json

### Update a Rule [PATCH /rules/{id}/]
Performs update of rule's attributes. Refer to the doc for rule creation to find out more about
how priority is calculated.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "PRODUCTNAME: Added Free Car",
                "data": {
                    "new_content": "%PRODUCTNAME% + Car"
                }
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/112"

    + Body
    
            {
                "id": "112",
                "project_id": "2",
                "project_element_id": "50",
                "applies": true,
                "is_deletable": true,
                "is_movable": true,
                "is_editable": true,
                "is_pausable": true,
                "name": "PRODUCTNAME: Added Free Car",
                "placement": {
                    "before": "111"
                }
                "type": "rewriting",
                "data": {
                    "new_content": "%CATEGORYTEXT% + Car"
                }
            }

### Get Rule Data [GET /rules/{id}/data/{?limit,offset,fields}]
Returns only the data of a specific rule instance. This can be helpful
for one to many (O2M) rules with a lot of records.

**OAuth2 Scope:** project.rules.read

+ Parameters

    + id (string) - ID of a rule.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "position": 1,
                        "query_id": "28",
                        "value": "2.00"
                    },
                    {
                        "position": 2,
                        "query_id": "30",
                        "value": "1.00"
                    }
                ],
                "type": "batch_rewriting",
                "rule_id": "15"
            }

## Queries [/projects/{id}/queries/]
MQL query management.

+ Attributes

    + id (string) - ID of the query.
    + name (string) - Name of the query.
    + project_id (string) - ID of the project the query is created in.
    + advanced_interface (string) - Whether the query was created using
      the advanced interface. Advanced interface represents the raw MQL query.
    + created_at (string) - When was the query created.
    + query (string) - Raw MQL.
    + read_only (boolean) - Whether the query can be modified.
    + search_output (boolean) - Whether the query should select products' data
      according to the values of input data or output data.
    + product_count (number) - Number of products matching the query.

### Create a Query [POST]
Creates a new query inside the specified project.

**OAuth2 Scope:** project.queries.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "PRICE less then 200 Kč",
                "query": "PRICE < 200",
                "read_only": false,
                "search_output": true
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/queries/d3o9v/"

    + Body
    
            {
                "id": "d3o9v",
                "name": "PRICE less then 200 Kč",
                "project_id": "21",
                "advanced_interface": true,
                "created_at": "2016-03-22T09:02:42+00:00",
                "query": "PRICE < 200",
                "read_only": false,
                "search_output": false,
                "product_count": 206
            }

### Get a Query [GET /queries/{id}/{?fields}]
Returns the requrested query.

**OAuth2 Scope:** project.queries.read

+ Parameters

    + id (string) - ID of a query.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "2",
                "name": null,
                "project_id": "33",
                "advanced_interface": false,
                "created_at": "2016-03-22T09:05:14+00:00",
                "query": "CATEGORYTEXT = \"Spotřební materiál | Ostatní spotřební materiál | Pásky a filmy\"",
                "read_only": false,
                "search_output": false,
                "product_count": 12
            }

### Delete a Query [DELETE /queries/{id}/]
Deletes a specific query.

**OAuth2 Scope:** project.queries.write

+ Parameters

    + id (string) - ID of a query.

+ Request

    + Headers

            Accept: application/json

+ Response 204

    + Headers

            Content-Type: application/json

### Update a Query [PATCH /queries/{id}/]
Performes update of the specified query.

**OAuth2 Scope:** project.queries.read

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "query": "PRICE > 200"
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/queries/d3o9v/"

    + Body
    
            {
                "id": "d3o9v",
                "name": "PRICE more then 200 Kč",
                "project_id": "21",
                "advanced_interface": false,
                "created_at": "2016-03-22T09:02:42+00:00",
                "query": "PRICE > 200",
                "read_only": false,
                "search_output": false,
                "product_count": 12983
            }

### List Project Queries [GET /projects/{id}/queries/{?limit,offset,fields}]
Lists all queries that were created inside the specified project.

**OAuth2 Scope:** project.queries.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "2",
                        "name": null,
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:05:14+00:00",
                        "query": "CATEGORYTEXT = \"Spotřební materiál | Pásky a filmy\"",
                        "read_only": false,
                        "search_output": false,
                        "product_count": 986
                    },
                    {
                        "id": "1",
                        "name": "ALLPRODUCTS",
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:02:42+00:00",
                        "query": "",
                        "read_only": true,
                        "search_output": false,
                        "product_count": 74
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### List Rule Queries [GET /rules/{id}/queries/{?limit,offset,fields}]
Lists all queries that were created for the specified rule.

**OAuth2 Scope:** project.queries.read

+ Parameters

    + id (string) - ID of a rule.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "2",
                        "name": null,
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:05:14+00:00",
                        "query": "CATEGORYTEXT = \"Spotřební materiál | Pásky a filmy\"",
                        "read_only": false,
                        "search_output": false,
                        "product_count": 12
                    },
                    {
                        "id": "1",
                        "name": "ALLPRODUCTS",
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:02:42+00:00",
                        "query": "",
                        "read_only": true,
                        "search_output": false,
                        "product_count": 38
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Assign a Query to a Rule [PATCH /rules/{id}/queries/]
Assigns a Query to a Rule. The query must exist, otherwise 400 (bad request) status is returned.
The body parameters also must uniquely identify a query. If the query is already assigned to the rule,
409 (conflict) status is returned.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + id (string) - ID of a rule.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "d3o9v"
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/d3o9v/queries/"

    + Body
    
            {
                "data": [
                    {
                        "id": "d3o9v",
                        "name": "PRICE more then 200 Kč",
                        "project_id": "21",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:02:42+00:00",
                        "query": "PRICE > 200",
                        "read_only": false,
                        "search_output": false,
                        "product_count": 4583
                    }
                ],
                "limit": 10,
                "offset": 0
            }

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "PRICE more then 200 Kč",
                "query": "PRICE > 200"
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/d3o9v/queries/"

    + Body
    
            {
                "data": [
                    {
                        "id": "2",
                        "name": "PRICE more then 200 Kč",
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:05:14+00:00",
                        "query": "PRICE > 200",
                        "read_only": false,
                        "search_output": false,
                        "product_count": 4583
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Retract a Query from a Rule [DELETE /rules/{rid}/queries/{qid}]
Retract a Query from a Rule.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + rid (string) - ID of a rule.
    + qid (string) - ID of a query.

+ Request

    + Headers

            Content-Type: application/json

+ Response 204

## Notifications [/shops/{id}/notifications/]
API for notifications. Notifications in Mergado have _channels_. A channel
represents a way to notify the users. Furthermore, notifications can be created
with a different _scope_. A scope defines who will receive the notification.
Notifications can be also made with different _priority_. Users can configure
what notification and how often they want to receive each notification with
given priority.

+ Attributes

    + title (string) - Subject or title of the notification.
    + body (string) - Notification text.
    + channels (enum[string], optional) - List of channels.
        + Default
            + `frontend`
        + Members
            + `email` - Notification is sent to the user's email.
            + `frontend` - Notification is shown in the Mergado's notification panel.
    + priority (enum[string], optional) - Priority of the notification.
        + Default
            + `medium`
        + Members
            + `low`
            + `medium`
            + `high`
    + scope (enum[string], optional) - Scope of the notification.
        + Default
            + `shop`
        + Members
            + `shop` - Notification is sent to all users who can access the eshop.
            + `owner` - Notification is sent only to the owner of the eshop.
            + `user` - Notification is sent to single user.

### Notify Eshop Members [POST]
**OAuth2 Scope:** shop.notify.write

+ Parameters

    + id (string) - ID of an eshop.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "title": "Eshop problem",
                "body": "There seems to be a problem in your eshop.",
                "channels": ["email"],
                "created_at": "2016-05-11 14:43:18",
                "priority": "high",
                "scope": "owner"
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/notifications/30/"

    + Body
    
            {
                "id": "30",
                "title": "Eshop problem",
                "body": "There seems to be a problem in your eshop.",
                "channels": ["email"],
                "created_at": "2016-05-11T14:43:18+00:00",
                "priority": "high",
                "scope": "owner"
            }

### Notify a User [POST /users/{id}/notifications/]
**OAuth2 Scope:** user.notify.write

+ Parameters

    + id (string) - ID of a user.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "title": "User settings change",
                "body": "Your settings has been updated.",
                "channels": ["email"],
                "created_at": "2016-05-11 14:43:18",
                "priority": "high"
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/notifications/32/"

    + Body
    
            {
                "id": "32",
                "title": "User settings change",
                "body": "Your settings has been updated.",
                "channels": ["frontend"],
                "created_at": "2016-05-11T14:43:18+00:00",
                "priority": "low",
                "scope": "user"
            }

### Get a Notification [GET /notifications/{id}/{?fields}]
**OAuth2 Scope:** shop.notify.read

+ Parameters

    + id (string) - ID of a notification.

+ Response 201

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "30",
                "title": "Eshop problem",
                "body": "There seems to be a problem in your eshop.",
                "channels": ["email"],
                "created_at": "2016-05-11T14:43:18+00:00",
                "priority": "high",
                "scope": "owner"
            }
            
### Get Users Notifications [GET /users/{id}/notifications/{?fields}]
**OAuth2 Scope:** user.notify.read

+ Parameters

    + id (string) - ID of a user.

+ Response 201

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "address": "freddy.krueger@mergado.com",
                        "channel": "email",
                        "id": "1",
                        "locale": null,
                        "notification_id": "1",
                        "resolve": "promptly",
                        "resolved_at": "2016-04-13T15:58:51+00:00",
                        "user_id": "1"
                    },
                    {
                        "address": null,
                        "channel": "frontend",
                        "id": "2",
                        "locale": null,
                        "notification_id": "2",
                        "resolve": "promptly",
                        "resolved_at": null,
                        "user_id": "1"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Logs [/projects/{id}/]
Core actions like import, export, an application of rules or download by a shopping
service are logged separately. Note that each log entry is available only for 30 days.

### Get an Import Log [GET /importlogs/{id}/{?fields}]
Fetches an import log with the given ID.

**OAuth2 Scope:** project.logs.read

+ Parameters

    + id (string) - ID of a log.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "duration": 2.352,
                "finished_at": "2016-05-18T15:16:25+00:00",
                "id": "75",
                "items": 1,
                "items_created": 1,
                "items_processed": 1,
                "items_removed": 0,
                "items_updated": 0,
                "started_at": "2016-05-18T15:16:23+00:00",
                "user_id": "1"
            }

### Get Import Logs [GET /projects/{id}/importlogs/{?limit,offset,fields}]
Fetches all import logs for given project.

**OAuth2 Scope:** project.logs.read

+ Parameters

    + id (string) - ID of a project.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "duration": 2.352,
                        "finished_at": "2016-05-18T15:16:25+00:00",
                        "id": "75",
                        "items": 1,
                        "items_created": 1,
                        "items_processed": 1,
                        "items_removed": 0,
                        "items_updated": 0,
                        "started_at": "2016-05-18T15:16:23+00:00",
                        "user_id": "1"
                    },
                    {
                        "duration": 1.423,
                        "finished_at": "2016-05-18T15:17:21+00:00",
                        "id": "76",
                        "items": 1,
                        "items_created": 0,
                        "items_processed": 1,
                        "items_removed": 0,
                        "items_updated": 0,
                        "started_at": "2016-05-18T15:17:20+00:00",
                        "user_id": null
                    }
                ],
                "limit": 10,
                "offset": 0
            }
            
### Get an Apply Log [GET /applylogs/{id}/{?fields}]
Fetches an apply log with the given ID. 

**OAuth2 Scope:** project.logs.read

+ Attributes

    + id (string) - ID of the log.
    + duration (number) - How long the action took.
    + started_at (string) - When the action started.
    + finished_at (string) - When the action ended.
    + rules (array) - Info about each applied rule.
    + user_id (string) - ID of the user who started the action.
    + applied_to_all_items (boolean) - Whether the action has
      been performed on all products.

+ Parameters

    + id (string) - ID of a log.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "duration": 1.548,
                "finished_at": "2016-05-18T15:16:26+00:00",
                "id": "155",
                "items": 1,
                "started_at": "2016-05-18T15:16:25+00:00",
                "rules": [
                    {
                        "processed_products": 64, 
                        "products": 64, 
                        "rule_id": "1"
                    }
                ],
                "user_id": "1",
                "applied_to_all_items": true
            }

### Get Apply Logs [GET /projects/{id}/applylogs/{?limit,offset,fields}]
Fetches all apply logs for given project.

**OAuth2 Scope:** project.logs.read

+ Attributes

    + id (string) - ID of the log.
    + duration (number) - How long the action took.
    + started_at (string) - When the action started.
    + finished_at (string) - When the action ended.
    + rules (array) - Info about each applied rule.
    + user_id (string) - ID of the user who started the action.
    + applied_to_all_items (boolean) - Whether the action has
      been performed on all products.

+ Parameters

    + id (string) - ID of a project.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "duration": 1.548,
                        "finished_at": "2016-05-18T15:16:26+00:00",
                        "id": "155",
                        "items": 1,
                        "started_at": "2016-05-18T15:16:25+00:00",
                        "rules": [
                            {
                                "processed_products": 64, 
                                "products": 64, 
                                "rule_id": "1"
                            }
                        ],
                        "user_id": "1",
                        "applied_to_all_items": true
                    },
                    {
                        "duration": 1.464,
                        "finished_at": "2016-05-18T15:17:22+00:00",
                        "id": "156",
                        "items": 1,
                        "started_at": "2016-05-18T15:17:21+00:00",
                        "rules": [
                            {
                                "processed_products": 64, 
                                "products": 64, 
                                "rule_id": "1"
                            },
                            {
                                "processed_products": 64, 
                                "products": 64,
                                "rule_id": "5"
                            }
                        ],
                        "user_id": null,
                        "applied_to_all_items": false
                    }
                ],
                "limit": 10,
                "offset": 0
            }
            
### Get an Export Log [GET /exportlogs/{id}/{?fields}]
Fetches an export log with the given ID.

**OAuth2 Scope:** project.logs.read

+ Parameters

    + id (string) - ID of a log.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "duration": 5,
                "finished_at": null,
                "id": "1",
                "initial": false,
                "items": 20,
                "processed_items": 20,
                "started_at": "2016-06-01T15:52:45+00:00",
                "user_id": "1"
            }
            
### Get Export Logs [GET /projects/{id}/exportlogs/{?limit,offset,fields}]
Fetches all export logs for given project.

**OAuth2 Scope:** project.logs.read

+ Parameters

    + id (string) - ID of a project.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "duration": 5,
                        "finished_at": null,
                        "id": "1",
                        "initial": false,
                        "items": 20,
                        "processed_items": 20,
                        "started_at": "2016-06-01T15:52:45+00:00",
                        "user_id": "1"
                    },
                    {
                        "duration": 10,
                        "finished_at": "2016-06-01T15:54:44+00:00",
                        "id": "2",
                        "initial": false,
                        "items": 100,
                        "processed_items": 100,
                        "started_at": "2016-06-01T15:54:30+00:00",
                        "user_id": "1"
                    }
                ],
                "limit": 10,
                "offset": 0
            }
            
### Get an Access Log [GET /accesslogs/{id}/{?fields}]
Fetches an access log with the given ID. If the related project has been deleted, 410 is returned instead.

**OAuth2 Scope:** project.logs.read

+ Parameters

    + id (string) - ID of a log.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "https": false,
                "id": "101",
                "identity": "-",
                "ip": "111.222.333.444",
                "referer": "-",
                "request": "GET /mergadovenaradie-cz-heureka-cz-greagfsdabtrshthgreav.xml HTTP/1.1",
                "size": 627142,
                "status": 200,
                "time": "2016-05-15T08:18:13+00:00",
                "user": "-",
                "user_agent": "Heurekabot-Feed/1.0 (+http://sluzby.heureka.cz/napoveda/heurekabot/)"
            }
    
+ Response 410

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "message": "The associated project for this log has been deleted"
            }
            
### Get Access Logs [GET /projects/{id}/accesslogs/{?limit,offset,fields}]
Fetches all access logs for given project.

**OAuth2 Scope:** project.logs.read

+ Parameters

    + id (string) - ID of a project.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "https": false,
                        "id": "101",
                        "identity": "-",
                        "ip": "111.222.333.444",
                        "referer": "-",
                        "request": "GET /mergadovenaradie-cz-heureka-cz-greagfsdabtrshthgreav.xml HTTP/1.1",
                        "size": 627142,
                        "status": 200,
                        "time": "2016-05-15T08:18:13+00:00",
                        "user": "-",
                        "user_agent": "Heurekabot-Feed/1.0 (+http://sluzby.heureka.cz/napoveda/heurekabot/)"
                    },
                    {
                        "https": false,
                        "id": "127",
                        "identity": "-",
                        "ip": "555.666.777.888",
                        "referer": "-",
                        "request": "HEAD /naradiovemergado-cz-kurtmjyrasnaENBREANzgtsf.xml HTTP/1.1",
                        "size": 0,
                        "status": 200,
                        "time": "2016-05-15T08:24:38+00:00",
                        "user": "-",
                        "user_agent": "Mozilla/5.0 (Windows; U; Windows NT 5.1; cs; rv:1) Gecko/20101203 Firefox/3.6.13 ( .NET CLR 1)"
                    }
                ],
                "limit": 10,
                "offset": 0
            }


## Enabled Apps [/users/{id}/apps/]
Management of enabled apps by users.

+ Attributes

    + app_name (string) - Name (ID) of the enabled app.
    + free_until (string) - Trial expiration date.
    + paid_until (string) - Paid subscription expiration date.

### List User Apps [GET /users/{id}/apps/{?limit,offset,fields}]
Lists apps enabled by the given user.

**OAuth2 Scope:** user.apps.read

+ Parameters

    + id (string) - ID of a user.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "app_name": "userappone",
                        "free_until": "2015-01-09",
                        "paid_until": "2016-01-08"
                    },
                    {
                        "app_name": "userapptwo",
                        "free_until": "2015-02-24",
                        "paid_until": "2015-03-23"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get User App [GET /users/{id}/apps/{name}/{?limit,offset,fields}]
Fetches an app enabled by the given user.

**OAuth2 Scope:** user.apps.read

+ Parameters

    + id (string) - ID of a user.
    + name (string) - Name of an app.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "app_name": "userappone",
                "free_until": "2015-01-09",
                "paid_until": "2016-01-08"
            }

### Update User App [PATCH /users/{id}/apps/{name}/]
Updates an app enabled by the given user.

**OAuth2 Scope:** user.apps.write

+ Parameters

    + id (string) - ID of a user.
    + name (string) - Name of an app.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "paid_until": "2016-02-08"
            }

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "app_name": "userappone",
                "free_until": "2015-01-09",
                "paid_until": "2016-02-08"
            }

### List Shop Apps [GET /shops/{id}/apps/{?limit,offset,fields}]
Lists apps enabled for the given eshop.

**OAuth2 Scope:** shop.apps.read

+ Parameters

    + id (string) - ID of a shop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "app_name": "shopappone",
                        "free_until": "2015-01-09",
                        "paid_until": "2016-01-08"
                    },
                    {
                        "app_name": "shopapptwo",
                        "free_until": "2015-02-24",
                        "paid_until": "2015-03-23"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get Shop App [GET /shops/{id}/apps/{name}/{?limit,offset,fields}]
Fetches an app enabled for the given shop.

**OAuth2 Scope:** shop.apps.read

+ Parameters

    + id (string) - ID of a shop.
    + name (string) - Name of an app.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "app_name": "shopappone",
                "free_until": "2015-01-09",
                "paid_until": "2016-01-08"
            }


### Update Shop App [PATCH /shops/{id}/apps/{name}/]
Updates an app enabled for the given shop.

**OAuth2 Scope:** shop.apps.write

+ Parameters

    + id (string) - ID of a shop.
    + name (string) - Name of an app.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "paid_until": "2017-02-08"
            }

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "app_name": "shopappone",
                "free_until": "2015-01-09",
                "paid_until": "2017-02-08"
            }

### List Project Apps [GET /projects/{id}/apps/{?limit,offset,fields}]
Lists apps enabled for the given project.

**OAuth2 Scope:** project.apps.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "app_name": "projectappone",
                        "free_until": "2015-01-09",
                        "paid_until": "2016-01-08"
                    },
                    {
                        "app_name": "projectapptwo",
                        "free_until": "2015-02-24",
                        "paid_until": "2015-03-23"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get Project App [GET /projects/{id}/apps/{name}/{?limit,offset,fields}]
Fetches an app enabled by the given project.

**OAuth2 Scope:** project.apps.read

+ Parameters

    + id (string) - ID of a project.
    + name (string) - Name of an app.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "app_name": "projectappone",
                "free_until": "2015-01-09",
                "paid_until": "2016-01-08"
            }

### Update User App [PATCH /projects/{id}/apps/{name}/]
Updates an app enabled for the given project.

**OAuth2 Scope:** project.apps.write

+ Parameters

    + id (string) - ID of a project.
    + name (string) - Name of an app.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "paid_until": "2016-04-08"
            }

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "app_name": "projectappone",
                "free_until": "2015-01-09",
                "paid_until": "2016-04-08"
            }

# Group Statistics
API for statistics collected from eshops, shopping services and other resources.

**Warning:** Statistics are currently collected only for the following
export (project) formats:

* `heureka.cz`, `heureka.sk` - all listed endpoints are supported.
* `zbozi.cz` - only eshop's statistics can be requested.

## Eshop Statistics [/shops/{id}/stats/{?limit,offset,fields}]
Collections here represent collected statistics of eshops from various
comparison shopping services (Zboží.cz, Heureka.cz, etc.).

### Get Statistics [GET]
Returns latest summarized statistics and other information of an eshop.

**OAuth2 Scope:** project.stats.read

+ Attributes

    + date (string) - Date of collection of the statistics.
    + heureka_contact_email (string) - Contact email of the eshop as shown
      on Heureka.
    + heureka_contact_phone (string) - Contact phone of the eshop as shown
      on Heureka.
    + heureka_credit_amount (string) - The amount of credit available in
      the account under which the eshop is registered.
    + heureka_credit_status (enum[string]) - Status of credit on Heureka
      evaluated by Mergado.
        + members
            + ok
            + low
            + none
    + heureka_follows_questions (boolean) - Whether the eshop has signed up
      to follow questions customers ask on Heureka about a product the eshop offers.
    + heureka_has_active_ppc (boolean) - Whether the eshop has activated PPC
      on Heureka.
    + heureka_has_certificate (boolean) - Whether the eshop received the
      certificate called "Ověřeno zákazníky" from Heureka.
    + heureka_logo_url (string) - URL of eshop's logo pointed to Heureka's servers.
    + heureka_subsidiaries_count (number) - Number of eshop's subsidiaries
      registered on Heureka (the eshop may have more subsidiaries, even though
      that would be their lost).
    + heureka_total_clicks (number) - Total number of clicks during 24 hours
      (counted for the chosen `date`) on Heureka for the eshop.
    + heureka_total_cost (number) Total cost for advertisement during 24 hours
      (counted for the chosen `date`) on Heureka for the eshop.
    + heureka_total_orders (number) - Total number of orders during 24 hours
      (counted for the chosen `date`) on Heureka for the eshop.
    + heureka_total_sales (number) Total turnover during 24 hours
      (counted for the chosen `date`) on Heureka for the eshop.
    + heureka_xml_available (boolean) - Whether the XML feed Heureka periodically
      downloads to update eshop's offers was available.
    + heureka_generate_xml_reports (boolean) - Whether eshop administrator
      enabled to generate XML reports with measurements of conversions on Heureka.
    + heureka_has_active_ppc (boolean) - Whether the eshop runs in the PPC mode
      on Heureka.
    + heureka_has_free_mode (boolean) - Whether the eshop runs in the free mode
      on Heureka.
    + heureka_measuring_conversions (boolean) - Whether eshop administrator
      enabled to collect data from measurements of conversions.
    + heureka_no_delivery_cost_specified (boolean) - Whether eshop administrator
      specified the cost of delivery on Heureka.
    + heureka_shop_communication_rating (number) - Average rating of the eshop's
      support and overall communication with the customer. Contains a number
      between 0 and 5 (bigger is better).
    + heureka_delivery_quality_rating (number) - Average rating of the quality
      of the delivery service employed by the eshop. Contains a number
      between 0 and 5 (bigger is better).
    + heureka_overall_satisfaction_rating (number) - Average rating of the
      overall satisfaction with the eshop from Heureka users. Contains a number
      between 0 and 5 (bigger is better).
    + heureka_web_ux_rating (number) - Average rating of the UX (User
      eXperience) about the eshop's websites from Heureka users. Contains
      a number between 0 and 5 (bigger is better).
    + heureka_delivery_time_rating (number) - Average rating of the deliver
      time of the product(s) ordered by the customer. Contains a number between
      0 and 5 (bigger is better).
    + heureka_product_returned_by (number) - Percentage of customers who
      returned a product ordered from the eshop.
    + heureka_shop_recommended_by (number) - Percentage of customers who
      would recommend the eshop to other customers.
    + heureka_product_received_ok_by (number) - Percentage of customers who
      received the product in a good condition.
    + heureka_last_order_at (string) - The date of last order by any customer.
    + hledejceny_credit_amount (number) - The amount of credit available in
      the account under which the eshop is registered.
    + hledejceny_total_clicks (number) - Total number of clicks during 24 hours
      (counted for the chosen `date`) on Hledejceny for the eshop.
    + hledejceny_total_cost (number) Total cost for advertisement during 24 hours
      (counted for the chosen `date`) on Hledejceny for the eshop.
    + srovname_credit_amount (number) - The amount of credit available in
      the account under which the eshop is registered.
    + srovname_total_clicks (number) - Total number of clicks during 24 hours
      (counted for the chosen `date`) on Srovname for the eshop.
    + srovname_total_cost (number) Total cost for advertisement during 24 hours
      (counted for the chosen `date`) on Srovname for the eshop.
    + zbozi_credit_amount (number) - The amount of credit available in
      the account on Zbozi.cz.
    + zbozi_credit_amount_with_vat (number) - The amount of credit with VAT available in
      the account on Zbozi.cz.
    + zbozi_total_clicks(number) - Total number of clicks during 24 hours
      (counted for the chosen `date`) on Zbozi for the eshop.
    + zbozi_total_cost (number) Total cost for advertisement during 24 hours
      (counted for the chosen `date`) on Zbozi for the eshop.
    + zbozi_is_campaign_activated (boolean) - Whether the campaign is activated
      on Zbozi.cz, i.e. whether the eshop's products are advertised or not.
    + zbozi_xml_feed (string) - URL of XML feed containing products entered
      in Zbozi.cz administration.

+ Parameters

    + id (string) - ID of the eshop.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "date": "2016-04-23",
                        "heureka_contact_email": "example@example.com",
                        "heureka_contact_phone": "123 456 789",
                        "heureka_credit_amount": 3904.82,
                        "heureka_credit_status": "ok",
                        "heureka_follows_questions": true,
                        "heureka_has_active_ppc": true,
                        "heureka_has_certificate": true,
                        "heureka_logo_url": "http://example.com/img/logo.png",
                        "heureka_subsidiaries_count": 101,
                        "heureka_total_clicks": 937,
                        "heureka_total_cost": 1788.12,
                        "heureka_total_orders": 84,
                        "heureka_total_sales": 52421.99,
                        "heureka_xml_available": true,
                        "heureka_generate_xml_reports": true,
                        "heureka_has_free_mode": false,
                        "heureka_has_active_ppc": true,
                        "heureka_measuring_conversions": true,
                        "heureka_no_delivery_cost_specified": true,
                        "heureka_shop_communication_rating": 4.5,
                        "heureka_delivery_quality_rating": 4.7,
                        "heureka_overall_satisfaction_rating": 4.5,
                        "heureka_web_ux_rating": 4.5,
                        "heureka_delivery_time_rating": 4.6,
                        "heureka_product_returned_by": 96.7,
                        "heureka_shop_recommended_by": 93.7,
                        "heureka_product_received_ok_by": 99.1,
                        "heureka_last_order_at": "2017-02-06",
                        "hledejceny_credit_amount": 1223.59,
                        "hledejceny_total_clicks": 12,
                        "hledejceny_total_cost": 98,
                        "srovname_credit_amount": 939,
                        "srovname_total_clicks": 19,
                        "srovname_total_cost": 54,
                        "zbozi_credit_amount": 1943,
                        "zbozi_credit_amount_with_vat": null,
                        "zbozi_total_clicks": 203,
                        "zbozi_total_cost": 1234,
                        "zbozi_campaign_activated": true,
                        "zbozi_xml_feed": "https://feeds.mergado.com/123-example-com"
                    }
                ],
                "limit": 10,
                "offset": 0
            }
            
### List All Sources [GET /shops/{id}/stats/sources/{?limit,offset,fields}]
Returns a list of all sources of a specific shop.

**OAuth2 Scope:** shop.stats.source.read

+ Attributes

    + id (string) - Id of the source.
    + feed_url (string) - URL of the source.
    + type (string) - Type of the source, e.g. heureka.
    + shop_id (string) - Id of the shop.
    
+ Parameters

    + id (string) - ID of the eshop.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
              "data": [
                {
                  "feed_url": "http://feeds.mergado.com/mironet-cz-heureka-cz-da8e66749aafb138fbb5742ffaac8289.xml",
                  "id": "65",
                  "shop_id": "1",
                  "type": "feed"
                },
                {
                  "feed_url": "https://www.heureka.cz/direct/xml-export/shops/roi/C59E6B2AF58927BF910BC02B004AC113/mironet-cz_day.xml.gz",
                  "id": "66",
                  "shop_id": "1",
                  "type": "heureka"
                },
                {
                  "feed_url": "https://feeds.mergado.com/extratrika-cz-mergado-statisticke-xml-d1c6085cf4324cd4ed93f007e7c173b0.xml",
                  "id": "64",
                  "shop_id": "1",
                  "type": "mergado"
                }
              ],
              "limit": 10,
              "offset": 0
            }

### Get a Source [GET /stats/sources/{id}/]
Return a source of statistics.

**OAuth2 Scope:** shop.stats.source.read

+ Attributes

    + id (string) - Id of the source.
    + feed_url (string) - URL of the source.
    + type (string) - Type of the source, e.g. heureka.
    + shop_id (string) - Id of the shop.
    
+ Parameters

    + id (string) - ID of the source.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
              "feed_url": "https://feeds.mergado.com/extratrika-cz-mergado-statisticke-xml-d1c6085cf4324cd4ed93f007e7c173b0.xml",
              "id": "64",
              "shop_id": "1",
              "type": "mergado"
            }


## Product Statistics [/products/{id}/stats/]
Statistics of products, this includes attributes like URL, PRICE etc.

+ Attributes

    + product_id (string) - ID of the product.
    + date (string) - Date of collection of the statistics.
    + stats (object) - The statistics.

        + item_id (string) - ITEM_ID of the product.
        + categorytext (string) - Value of the `CATEGORYTEXT` element.
        + delivery_date (string) - Delivery date set by the eshop.
        + url (string) - URL of the product in eshop.
        + name (string) - Name of the product in eshop.
        + price (number) - Price without VAT of the product.
        + price_vat (number) - Price (with VAT included) of the product.
        + manufacturer (string) - Manufacturer of the product set by the eshop.
        + imgurl (string) - URL of the product's image.
        + cost (number) - How much the eshop had to pay for the product.
        + is_starter (boolean) - This indicates whether the product is something
          you usually buy with something else. Or to put it differently, let's
          say you buy the body of a DLSR (e.g. Nikon D5200) than it is very
          likely you also buy a lens or a tripod. This is indicated by this
          attribute. Unfortunately at the moment no eshop provides this information.
        + is_topseller (boolean) - Whether the product is one of the most
          selling products in the eshop.
        + heureka_avg_position (number) - Average bidding position of the product
          on Heureka. Unfortunately this is not very reliable information as
          the average is taken only from all actual clicks on the product.
          Also the product must be very popular, otherwise the information is
          completely missing.
        + heureka_category (string) - Name of category Heureka paired this product into.
        + heureka_cpc (number) - Offered cost per click to Heureka by the eshop.
        + heureka_is_paired (boolean) - Whether the product is paired to a
          category on Heureka.
        + heureka_max_prices (array) - Ordered list of maximal prices of the
          product offered by other eshops.
        + heureka_min_praces (array) - Ordered list of minimal prices of the
          product offered by other eshops.
        + heureka_min_cpc (number) - The minimal CPC Heureka accepts for the
          product.
        + heureka_min_price (number) - Minimal offered price for the product
          from all eshops.
        + heureka_name (string) - Name of the product shown on Heureka.
        + heureka_popularity (number) - Popularity of the product on Heureka.
          The bigger, the more popular. There is no maximal popularity of
          product since Heureka doesn't provide such information.
        + heureka_price_position (number) - Position of the product on by price
          on Heureka.
        + heureka_profit (number) - Calculated eshop's profit from advertising
          the product on Heureka.
        + heureka_segment (string) - The name of the section on Heureka the
          product was paired into.
        + heureka_shops_count (number) - Number of eshops that offer the same
          product on Heureka.
        + heureka_stats_clicks (number) - Number of clicks on the product
          offered by this eshop on Heureka.
        + heureka_stats_cost_of_sales (number) - Cost of sales for the product
          on Heureka.
        + heureka_stats_cpc (number) - Paid costs per click for the product
          on Heureka.
        + heureka_stats_sales (number) - Sales from the product on Heureka.
        + heureka_stats_total_cost (number) Total cost for advertisement of
          the product on Heureka.
        + heureka_stats_total_orders (number) - Number of total orders of
          this product on Heureka.
        + heureka_url (string) - URL of the product on Heureka.
        + heureka_price_status (enum[string]) - Indicates status of price
          of the product on Heureka and is evaluated by Mergado from the
          other available statistics.
            + Members
                + ok
                + low
                + increased
                + high
        + heureka_position_status (enum[string]) - This is an enum indication
          position status on Heureka, evaluated by Mergado.
            + Members
                + ok
                + low
        + heureka_margin_status (enum[string]) - This is an enum indicating
          status of margin from Heureka of the product evaluated by Mergado.
            + Members
                + ok
                + low
                + negative
        + heureka_cpc_status (enum[string]) - This is an enum indicating status
          of CPC on Heureka evaluated by Mergado.
            + Members
                + ok
                + low
                + decreased

### Statistics of a Product [GET /products/{id}/stats/{?fields,date}]
Retruns statistics of a product, by default only the latest statistics (usualy from yesterday)
are returned. This can be changed by the query string parameter `date`.

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the product.
    + date (date, optional) - Date of the collection of the statistics.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "product_id": "4191",
                "date": "2015-01-01",
                "stats": {
                    "categorytext": "Elektronika | Počítače a kancelář",
                    "cost": 88.9,
                    "delivery_date": 0,
                    "heureka_avg_position": 1,
                    "heureka_category": "Barvící pásky",
                    "heureka_cpc": 1.55,
                    "heureka_cpc_status": "ok",
                    "heureka_is_alone": false,
                    "heureka_is_paired": true,
                    "heureka_margin_status": "ok",
                    "heureka_max_prices": [280.7, 128, null, null, null, null, null, null, null, null],
                    "heureka_min_cpc": 1,
                    "heureka_min_price": 128,
                    "heureka_min_prices": [128, 280.7, null, null, null, null, null, null, null, null],
                    "heureka_name": "Kazeta s černou páskou",
                    "heureka_popularity": 4,
                    "heureka_position_status": "ok",
                    "heureka_price_position": 2,
                    "heureka_price_status": "ok",
                    "heureka_profit": 0,
                    "heureka_segment": null,
                    "heureka_shops_count": 2,
                    "heureka_stats_clicks": 0,
                    "heureka_stats_cost_of_sales": 0,
                    "heureka_stats_cpc": 0,
                    "heureka_stats_sales": 0,
                    "heureka_stats_total_cost": 0,
                    "heureka_stats_total_orders": 0,
                    "heureka_url": "http://barvici-pasky.heureka.cz/kazeta-s-cernou-paskou/",
                    "imgurl": "https://www.example.com/img/992.jpg",
                    "is_starter": null,
                    "is_topseller": null,
                    "item_id": "992",
                    "manufacturer": "Biostar",
                    "name": "Kazeta s černou páskou",
                    "price": 232,
                    "price_vat": 280.7,
                    "url": "https://www.example.comkazeta-s-cernou-paskou"
                }
            }
 
 
### Statistics of All Products [GET /projects/{id}/stats/products/{?fields,limit,offset,date,filter_by}]
Returns statistics of all products, by default only the latest statistics (usualy from yesterday)
are returned. This can be changed by the query string parameter `date`

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the project.
    + date (date, optional) - Date of the collection of the requested statistics.
    + filter_by (string, optional) - Currently only filtering by `item id` is supported.
      See the section [Additional GET parameters](#introduction/additional-get-parameters)

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                {
                    "product_id": "123678",
                    "date": "2015-02-02",
                    "stats": {
                        "categorytext": "Náhradní díly | LCD Display pro notebook",
                        "cost": 1070.4,
                        "delivery_date": 0,
                        "heureka_avg_position": 1,
                        "heureka_cpc": 2.05,
                        "heureka_min_cpc": 1.5,
                        "heureka_min_price": 2621,
                        "heureka_name": "10.1 LCD LED Display univerzální notebook",
                        "heureka_price_position": 1,
                        "heureka_stats_clicks": 0,
                        "heureka_stats_cost_of_sales": 0,
                        "heureka_stats_cpc": 0,
                        "heureka_stats_sales": 0,
                        "heureka_stats_total_cost": 0,
                        "heureka_stats_total_orders": 0,
                        "heureka_url": "http://displeje-pro-notebooky.heureka.cz/10_1-lcd-led-display-univerzalni-notebook/",
                        "imgurl": "https://www.example.com/img/990.jpg",
                        "is_starter": null,
                        "is_topseller": null,
                        "item_id": "990",
                        "manufacturer": "Samsung / Samsung LTN",
                        "name": "10.1 LCD LED Display univerzální notebook",
                        "price": 2166,
                        "price_vat": 2620.9,
                        "url": "https://www.example.com/101quot-lcd-led-display-univerzalni-notebook"
                    }
                },
                {
                    "product_id": null,
                    "date": "2015-02-02",
                    "stats": {
                        "categorytext": "Komponenty | Chlazení | Vodní | Vodní bloky | Procesory",
                        "cost": 1500.7,
                        "delivery_date": 0,
                        "heureka_cpc": null,
                        "imgurl": "https://www.example.com/img/924.jpg",
                        "is_starter": null,
                        "is_topseller": null,
                        "item_id": "924",
                        "manufacturer": "Aqua Computer",
                        "name": "Aqua Computer Cuplex Kryos XT",
                        "price": 1651,
                        "price_vat": 1997.7,
                        "url": "https://www.example.com/aqua-computer-cuplex-kryos-xt"
                    }
                }
                ],
                "limit": 10,
                "offset": 0
            }

### Statistics of All Products using POST [POST /projects/{id}/stats/products/]
Returns statistics of all products by POST, by default only the latest statistics (usualy from yesterday)
are returned. This can be changed by the field `date`

**OAuth2 Scope:** project.stats.read

+ Request

    + Headers
    
            Content-Type: application/json

    + Attributes (object)
        + date (string) - Date of the collection of the requested statistics.
        + filter_by (string) - Currently only filtering by `item id` is supported.
          See the section [Additional GET parameters](#introduction/additional-get-parameters).
    
    + Body
    
            {
                "date": "2016-02-02",
                "filter_by": {
                    "item_id__in": ["a", "b", "c"]
                }
            }

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "product_id": "123678",
                        "date": "2015-02-02",
                        "stats": {
                            "categorytext": "Náhradní díly | LCD Display pro notebook",
                            "cost": 1070.4,
                            "delivery_date": 0,
                            "heureka_avg_position": 1,
                            "heureka_cpc": 2.05,
                            "heureka_min_cpc": 1.5,
                            "heureka_min_price": 2621,
                            "heureka_name": "10.1 LCD LED Display univerzální notebook",
                            "heureka_price_position": 1,
                            "heureka_stats_clicks": 0,
                            "heureka_stats_cost_of_sales": 0,
                            "heureka_stats_cpc": 0,
                            "heureka_stats_sales": 0,
                            "heureka_stats_total_cost": 0,
                            "heureka_stats_total_orders": 0,
                            "heureka_url": "http://displeje-pro-notebooky.heureka.cz/10_1-lcd-led-display-univerzalni-notebook/",
                            "imgurl": "https://www.example.com/img/990.jpg",
                            "is_starter": null,
                            "is_topseller": null,
                            "item_id": "990",
                            "manufacturer": "Samsung / Samsung LTN",
                            "name": "10.1 LCD LED Display univerzální notebook",
                            "price": 2166,
                            "price_vat": 2620.9,
                            "url": "https://www.example.com/101quot-lcd-led-display-univerzalni-notebook"
                        }
                    },
                    {
                        "product_id": null,
                        "date": "2015-02-02",
                        "stats": {
                            "categorytext": "Komponenty | Chlazení | Vodní | Vodní bloky | Procesory",
                            "cost": 1500.7,
                            "delivery_date": 0,
                            "heureka_cpc": null,
                            "imgurl": "https://www.example.com/img/924.jpg",
                            "is_starter": null,
                            "is_topseller": null,
                            "item_id": "924",
                            "manufacturer": "Aqua Computer",
                            "name": "Aqua Computer Cuplex Kryos XT",
                            "price": 1651,
                            "price_vat": 1997.7,
                            "url": "https://www.example.com/aqua-computer-cuplex-kryos-xt"
                        }
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Category Statistics [/projects/{id}/stats/categories/]
A collection of statistics about categories.

+ Attributes
    + date (string) - Date of the collection of the statistics.
    + categorytext (string) - Value of the element `CATEGORYTEXT`.
    + paired_products (number) - Number of products correctly paired on Heureka
      with the given value of `CATEGORYTEXT`.
    + unpaired_products (number) - Number of products incorrectly paired on Heureka
      with the given value of `CATEGORYTEXT`.

### Statistics of Categories [GET /projects/{id}/stats/categories/{?fields,limit,offset}]
Returns latest statistics of feed's categories (for example number of paired products
for given `CATEGORYTEXT`).

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the project.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "categorytext": "Elektronika | Foto | Foto doplňky a příslušenství | Fotopapíry",
                        "date": "2016-04-19",
                        "paired_products": 5,
                        "unpaired_products": 0
                    },
                    {
                        "categorytext": "Elektronika | Foto | Dalekohledy",
                        "date": "2016-04-19",
                        "paired_products": 20,
                        "unpaired_products": 10
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Audited Statistics [/projects/{id}/stats/audits/]
Audits evaluated in Mergado from the available data (other statistics).
For example, we are able to detect if the offered price is too high as we store
positions of products on Heureka.

+ Attributes
    + id (string) - ID of the audit.
    + date (string) - When the audit was performed.
    + status (enum[string]) - Status of the audit.
        + members
            + done
            + in_progress
            + error
    + error (string, optional) - Error raised during the process of
      performing audit.
    + started_at (string) - When the audit was started.
    + finished_at (string) - When the audit was finished.
    + product_count (number) - Number of products in the audit.
    + issues (object) - Occurrences of issues in the audit.

### List of Audits [GET /projects/{id}/stats/audits/{?fields,limit,offset}]
Returns list of performed audits.

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the project.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "date": "2016-05-03",
                        "error": null,
                        "finished_at": null,
                        "id": "163-160503",
                        "started_at": "2016-05-04T04:50:06+00:00",
                        "status": "in_progress"
                    },
                    {
                        "date": "2016-05-02",
                        "error": "required_stats_unavailable",
                        "finished_at": "2016-05-03T20:57:09+00:00",
                        "id": "163-160502",
                        "started_at": "2016-05-03T04:50:06+00:00",
                        "status": "error"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get an Audit [GET /stats/audits/{id}/{?fields}]
Returns a performed audit.

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the audit.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "id": "163-160419",
                "date": "2016-04-19",
                "error": null,
                "status": "done",
                "finished_at": "2016-04-20T12:22:49+00:00",
                "product_count": 24989,
                "started_at": "2016-04-20T11:56:50+00:00",
                "issues": {
                    "heureka_category_name": {
                        "ok": {
                            "count": 144,
                            "items": 383
                        },
                        "wrong": {
                            "count": 239,
                            "items": 383
                        }
                    },
                    "heureka_cpc_status": {
                        "decreased": {
                            "count": 238,
                            "items": 24989
                        },
                        "low": {
                            "count": 147,
                            "items": 24989
                        },
                        "ok": {
                            "count": 24604,
                            "items": 24989
                        }
                    },
                    "heureka_is_paired": {
                        "ok": {
                            "count": 20758,
                            "items": 24989
                        },
                        "wrong": {
                            "count": 4231,
                            "items": 24989
                        }
                    },
                    "heureka_margin_status": {
                        "ok": {
                            "count": 24989,
                            "items": 24989
                        }
                    },
                    "heureka_not_alone": {
                        "alone": {
                            "count": 13411,
                            "items": 24989
                        },
                        "ok": {
                            "count": 11578,
                            "items": 24989
                        }
                    }
                }
            }

### List Issues [GET /stats/audits/{id}/issues/{?fields,limit,offset,filter_by,order_by}]
Returns list of issues of an audit.

**OAuth2 Scope:** project.stats.read

+ Attributes

    + audit_id (string) - ID of the audit.
    + item_id (string) - ITEM_ID of the product.
    + product_id (string) - ID of the product in Mergado.
    + validator (string) - A name identifying the performed validation.
    + verdict (string) - Verdict of the performed validation.
    + info (object) - Additional info of the performed validation.

+ Parameters

    + id (string) - ID of the audit.
    + filter_by (string, optional) - Filters to apply to the response.
    + order_by (string, optional) - Sorting to apply to the response.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "audit_id": "163-160419",
                        "item_id": "1835",
                        "product_id": null,
                        "validator": "heureka_is_paired",
                        "verdict": "wrong",
                        "info": {
                            "price_vat": 199
                        }
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Logs of the Import of Statistics [/statslogs/{id}/]

### Get a Log of the Import of Statistics [GET /statslogs/{id}/{?fields}]
Returns a *log* of the import of statistics with the given ID.

**OAuth2 Scope:** shop.stats.read

+ Parameters

    + id (string) - ID of a log.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "130",
                "type": "heureka",
                "status": "done",
                "error": null,
                "items": 21839,
                "created_at": "2014-07-02T11:54:37.123456+00:00",
                "finished_at": "2014-07-02T11:56:00.123456+00:00",
                "shop_id": "2"
            }

### List All Logs of a Shop [GET /shops/{id}/statslogs/{?limit,offset,fields}]
Returns all *logs* of the import of statistics.

**OAuth2 Scope:** shop.stats.read

+ Parameters

    + id (string) - ID of the shop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body

            [
                {
                    "id": "130",
                    "type": "heureka",
                    "status": "done",
                    "error": null,
                    "items": 21839,
                    "created_at": "2014-07-02T11:54:37.123456+00:00",
                    "finished_at": "2014-07-02T11:56:00.123456+00:00",
                    "shop_id": "2"
                },
                {
                    "id": "129",
                    "type": "sortiment",
                    "status": "error",
                    "error": "heureka_auth_error",
                    "items": null,
                    "created_at": "2014-07-02T11:54:37.123456+00:00",
                    "finished_at": "2014-07-02T11:56:00.123456+00:00",
                    "shop_id": "2"
                }
            ]

# Group Feed Audits
Audit of product feed.

- Issues are checks with non-ok verdicts. Some issues are feed-wide, so
  they are bound only to an audit resource. Most issues are product-specific,
  so they are bound to audit and also to product resource.
- Every validator provides specific additional info to check. It is accessible
  in `info` field of issues and it can have various forms - its schema is
  validator-dependent.
- Web hook URL is requested with POST (audit's JSON resource sent in data)
  right in the moment when audit is finished.
- Progress is raised by every check, there is no information about *total*
  number of progress units.
- Feed type is optional. In case it's missing, it is detected before audit
  starts.
- Error field of audits and issues has nothing to do with checking itself -
  is is used only in case mergado3 application fails and raises an exception.
  This generic error field is rather for debugging API than for being consumed
  by API clients.
- Product's data is parsed and saved just *as is* into data field. No semantic
  analysis is performed, validators take it raw and do whatever they want
  with it. This means the data field also has no fixed schema.
- Audits can be scheduled.

## Audits [/projects/{id}/feedaudits/]
Audit represents validation of an XML feed.

+ Attributes

    + id (string) - ID of the audit.
    + date (string) - When the audit was performed.
    + status (enum[string]) - Status of the audit.
        + members
            + done
            + in_progress
            + error
    + error (string, optional) - Error raised during the process of
      performing audit.
    + started_at (string) - When the audit was started.
    + finished_at (string) - When the audit was finished.
    + product_count (number) - Number of products in the audit.
    + issues (object) - Occurrences of issues in the audit.
    + parser_type (string) - Parser used for parsing the XML feed.
    + feed_url (string) - URL of the XML feed.
    + shop_name (string) - Detected eshop's name (is not 100% accurate).
    + webhook_url (string) - URL to call when the audit is finished.
      The URL is called via an HTTP POST with the audit information in the body.
    + encoding (string) - Detected encoding.
    + time (string) - Number of seconds the audit runs.
    + expired_at (string) - Whether the audit expired, if yes than the date
      of expiration.
    + progress (number) - Progress of the audit (a number between 0 and 100).

### Create a New Audit [POST]
Creates and starts an audit. Feed type, web hook and shop id are optional.

**OAuth2 Scope:** projects.feedaudit.write

+ Parameters

    + id (string) - ID of the project.
    
+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "parser_type": "heureka.cz",
                "feed_types": ["heureka.cz"],
                "feed_url": "https://www.example.com/feed.xml",
                "webhook_url": "http://www.example.com/ping.php"
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/projects/57334061ba4989170e78dbf3/feedaudits/"

    + Body
    
            {
                "id": "51768ba7ed14f444772d6137",
                "error": null,
                "status": "in_progress",
                "feed_url": "https://www.example.com/feed.xml",
                "webhook_url": "http://www.example.com/ping.php",
                "shop_name": "Example.com",
                "parser_type": "heureka.cz",
                "feed_types": ["heureka.cz"],
                "encoding": "utf-8",
                "time": 254,
                "expired_at": null,
                "product_count": 8367,
                "progress": 40,
                "started_at": "2013-04-23T13:24:55+00:00",
                "finished_at": null
            }

### List Audits [GET /projects/{id}/feedaudits/{?limit,offset,fields}]
Returns list of all audits.

+ Parameters

    + id (string) - ID of the project.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "51768ba7ed14f444772d6137",
                        "error": null,
                        "status": "in_progress",
                        "feed_url": "https://www.example.com/feed.xml",
                        "webhook_url": "http://www.example.com/ping.php",
                        "shop_name": "Example.com",
                        "parser_type": "heureka.cz",
                        "feed_types": ["heureka.cz", "zbozi.cz"],
                        "encoding": "utf-8",
                        "time": 254,
                        "product_count": 8367,
                        "progress": 40,
                        "started_at": "2013-04-23T13:24:55+00:00",
                        "finished_at": null
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get an Audit [GET /feedaudits/{id}/{?fields]
Returns the requested audit resource.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the audit.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "51768ba7ed14f444772d6137",
                "error": null,
                "status": "in_progress",
                "feed_url": "https://www.example.com/feed.xml",
                "webhook_url": "http://www.example.com/ping.php",
                "shop_name": "Example.com",
                "parser_type": "heureka.cz",
                "feed_types": ["heureka.cz", "zbozi.cz"],
                "encoding": "utf-8",
                "time": 254,
                "product_count": 8367,
                "progress": 40,
                "started_at": "2013-04-23T13:24:55+00:00",
                "finished_at": null
            }

## Audit Issues [/feedaudits/{id}/issues/{?limit,offset,fields,filter_by,order_by}]
Each issue represents error, warning or recommendation that applies for products or
the whole feed.

+ Attributes

    + id (string) - ID of the issue.
    + audit_id (string) - ID of the audit.
    + product_id (string) - ID of the product (this is not a ID of the product
      in Mergado).
    + validator (string) - A name identifying the performed validation.
    + verdict (string) - Verdict of the performed validation.
    + info (object) - Additional info of the performed validation.
    + checked_at (string) - When the validation was performed.
    + level (enum[string]) - Level of the importance of the issue.
        + members
            + recommendation
            + warning
            + error
    + feed_types (array) - List of formats or feed types the issue applies to.

### List Audit Issues [GET]
Returns all issues (problematic validations) of a specific audit.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the audit.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "51768ba7ed14f444772d6138",
                        "product_id": "57330212ba49891750549828",
                        "audit_id": "51768ba7ed14f444772d6137",
                        "checked_at": "2013-04-23 13:24:55+0000",
                        "verdict": "error",
                        "info": {
                            "element": "PRODUCT"
                        },
                        "validator": "is_present_product",
                        "level": "recommendation",
                        "feed_types": ["heureka.cz", "zbozi.cz"]
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get an Issue [GET /feedaudits/issues/{id}/{?fields}]
Returns single issue with given `id`.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the issue.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "51768ba7ed14f444772d6138",
                "checked_at": "2013-04-23T13:24:55+00:00",
                "verdict": "error",
                "info": {
                    "element": "PRODUCT"
                },
                "validator": "is_present_product",
                "level": "recommendation",
                "feed_types": ["heureka", "zbozi"],
                "product_id": "51768ba7ed14f444772d6120",
                "audit_id": "51768ba7ed14f444772d6137"
            }

### List Product's Issues [GET /feedaudit/products/{id}/issues/{?limit,offset,fields,filter_by,order_by}]
Returns all issues (problematic validations) of a specific product.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the product.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "51768ba7ed14f444772d6138",
                        "product_id": "51768ba7ed14f444772d6120",
                        "audit_id": "51768ba7ed14f444772d6137",
                        "checked_at": "2013-04-23T13:24:55+00:00",
                        "verdict": "error",
                        "info": {
                            "element": "PRODUCT"
                        },
                        "validator": "is_present_product",
                        "feed_types": ["heureka", "zbozi"]
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Audit Products [/feedaudit/audits/{id}/products/{?limit,offset,fields,filter_by,order_by}]
XML feed's products for validation.

+ Attributes

    + id (string) - ID of the product.
    + audit_id (string) - ID of the audit.
    + elements (array) - List of elements, values and subelements.
        + (object)
            + tag (string) - Name of the element.
            + value (string) - Value of the element.
            + elements (array) - Subelements of the element.

### List Audit Products [GET]
Returns all products of a specific audit.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the audit.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "51768ba7ed14f444772d6120",
                        "audit_id": "51768ba7ed14f444772d6137",
                        "elements": [
                            {"tag": "PRODUCT", "value": "Hovězí plíce 100 g", "elements": []},
                            {"tag": "DESCRIPTION", "value": "<P>Čistě dietní krm...</div>", "elements": []},
                            {"tag": "DELIVERY_DATE", "value": 1, "elements": []},
                            {"tag": "PRICE_VAT", "value": 240.5, "elements": []}
                        ]
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get a Product [GET /feedaudit/products/{id}{?fields}]
Returns a single product resource.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the product.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "51768ba7ed14f444772d6120",
                "audit_id": "51768ba7ed14f444772d6137",
                "elements": [
                    {"tag": "PRODUCT", "value": "Hovězí plíce 100 g", "elements": []},
                    {"tag": "DESCRIPTION", "value": "<P>Čistě dietní krm...</div>", "elements": []},
                    {"tag": "DELIVERY_DATE", "value": 1, "elements": []},
                    {"tag": "PRICE_VAT", "value": 240.5, "elements": []}
                ]
            }
            
# Group Heureka
API for various Heureka.cz helpers and resources.

## Heureka Categories [/categories/]
API for Heureka categories. Categories have a _min cpc_ value attached to it. 
But not every category displays this value. If you want to find a _min cpc_ value of a category,
you need to traverse its parents until you find a category with _min cpc_ displayed. This _min cpc_ then applies
to all children categories.

+ Attributes

    + id (string) - ID of the category.
    + name (string) - Name of the category.
    + full_name (string) - Full name of the category.
    + heureka_id (string) - ID of the category in Heureka.
    + parent (object) - Parent of the category.
        + id (string) - ID of the parent.
        + name (string) - Name of the parent.
    + children (array) - Sub-categories of the category.
        + (object)
            + id (string) - ID of the child.
            + name (string) - Name of the child.
    + min_cpcs (array) - List of CPC values that apply to all children of the category unless explicitely
      specified by the child.
        + (object)
            + to_price (float) - Max price of the product in the category.
            + value (float) - Max CPC for the product given its price.

### Get a Category [GET /heureka/categories/{id}/{?fields}]
Returns a single Heureka category.

+ Parameters

    + id (string) - ID of the category.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "68",
                "name": "Poker",
                "full_name": "Šport | Poker",
                "heureka_id": "502",
                "parent": {
                    "id": "7",
                    "name": "Šport"
                },
                "children": [
                    {
                        "id": "463",
                        "name": "Hracie karty - poker"
                    },
                    {
                        "id": "464",
                        "name": "Poker sady"
                    },
                    {
                        "id": "465",
                        "name": "Príslušenstvo pre poker"
                    },
                    {
                        "id": "466",
                        "name": "Stoly na poker"
                    },
                    {
                        "id": "467",
                        "name": "Žetóny - poker"
                    }
                ],
                "min_cpcs": [
                    {
                        "to_price": "10.0",
                        "value": 0.03
                    },
                    {
                        "to_price": "40.0",
                        "value": 0.05
                    },
                    {
                        "to_price": "110.0",
                        "value": 0.05
                    },
                    {
                        "to_price": "185.0",
                        "value": 0.07
                    },
                    {
                        "to_price": "370.0",
                        "value": 0.09
                    },
                    {
                        "to_price": null,
                        "value": 0.11
                    }
                ]
            }
            
### List Categories [GET /heureka/categories/{?limit,offset,fields,}]
Returns list of all Heureka categories.


+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            [
                {
                    "id": "1",
                    "name": "Heureka.cz",
                    "full_name": "Heureka.cz",
                    "heureka_id": "123",
                    "parent": null,
                    "children": [
                        {
                            "id": "2210",
                            "name": "Auto-moto"
                        },
                        {
                            "id": "2209",
                            "name": "Bílé zboží"
                        }
                    ],
                    "min_cpcs": []
                },
                {
                    "id": "2",
                    "name": "Heureka.sk",
                    "full_name": "Heureka.sk",
                    "heureka_id": "768",
                    "parent": null,
                    "children": [
                        {
                            "id": "5",
                            "name": "Auto-moto"
                        },
                        {
                            "id": "15",
                            "name": "Biela technika"
                        }
                    ],
                    "min_cpcs": []
                }
            ]

# Group Google
API for various Google tools, helpers and resources.

## Google Analytics [/projects/{id}/google/analytics/]

+ Attributes

    + group (object) - Values of the requested dimensions for the group.
        + date (string) - Groups each product by the date the product has been collected.
        + day_of_week (number) - Groups the products by the day of the week.
        + landing_page_path (string) - Groups the products by the first page in users' sessions,
          or the landing page. See Google Analytics for mor details.
    + clicks_sum (number) - Number of clicks of all products in the group.
    + orders_sum (number) - Number of orders of all products in the group.
    + sales_sum (number) - Total sales of all products in the group.

### Eshop Data [GET /shops/{id}/google/analytics/{?fields,limit,offset,start_date,end_date,source,metrics,dimensions,medium}]
Returns evaluetad metrics for each *group* (default is `date`, see bellow) ordered by the *group*'s
value in ascending order. Groups of results can be created using `dimensions` query string.

**OAuth2 Scope:** shop.ga.read

+ Parameters

    + id (string) - ID of the shop.
    + source (string, optional) - The source of referrals. For manual campaign tracking,
      it is the value of the utm_source campaign tracking parameter. This parameter
      can be a regular expression (in which case the operator `=~` must be used, e.g.
      `source=~*.example.com`) or ID of a format (see section with formats).
    + medium (string, optional) - The general category of the source, for example,
      organic search (organic), cost-per-click paid search (cpc), web referral (referral).
    + metrics (enum[string], optional) - Comma sepparated list of metrics to use.
        + Members
            + `sales_sum` - total sales of all products in the group.
            + `orders_sum` - number of orders of all products in the group.
            + `clicks_sum` - number of clicks of all products in the group.
    + dimensions (enum[string], optional) - Comma sepparated list of dimensions to use.
        + Default: `date`
        + Members
            + `date` - groups each product by the date the product has been collected.
            + `day_of_week` - groups the products by the day of the week.
            + `landing_page_path` - gropus the products by the first page in users' sessions,
              or the landing page. See Google Analytics for mor details.
    + start_date (string, optional)
    + end_date (string, optional)
    + fields (string, optional)
    + limit (number, optional)
    + offset (number, optional)

+ Response 200

    + Headers

            Content-Type: application/json
    
    + Body
    
            {
                "data": [
                    {
                        "group": {"date": "2016-05-04"},
                        "clicks_sum": 861,
                        "orders_sum": 50,
                        "sales_sum": 129852
                    },
                    {
                        "group": {"date": "2016-05-03"},
                        "clicks_sum": 1661,
                        "orders_sum": 69,
                        "sales_sum": 225298
                    },
                    {
                        "group": {"date": "2016-05-02"},
                        "clicks_sum": 1523,
                        "orders_sum": 70,
                        "sales_sum": 141676
                    },
                    {
                        "group": {"date": "2016-05-01"},
                        "clicks_sum": 1095,
                        "orders_sum": 54,
                        "sales_sum": 113470
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Project Data [GET /projects/{id}/google/analytics/{?fields,limit,offset,start_date,end_date,metrics,dimensions,medium}]
Returns evaluetad metrics for each *group* (default is `date`, see bellow) ordered by the *group*'s
value in ascending order. Groups of results can be created using `dimensions` query string.

**OAuth2 Scope:** project.ga.read

+ Parameters

    + id (string) - ID of the project.
    + medium (string, optional) - The general category of the source, for example,
      organic search (organic), cost-per-click paid search (cpc), web referral (referral).
    + metrics (enum[string], optional) - Comma sepparated list of metrics to use.
        + Members
            + `sales_sum` - total sales of all products in the group.
            + `orders_sum` - number of orders of all products in the group.
            + `clicks_sum` - number of clicks of all products in the group.
    + dimensions (enum[string], optional) - Comma sepparated list of dimensions to use.
        + Default: `date`
        + Members
            + `date` - groups each product by the date the product has been collected.
            + `day_of_week` - groups the products by the day of the week.
            + `landing_page_path` - gropus the products by the first page in users' sessions,
              or the landing page. See Google Analytics for mor details.
    + start_date (string, optional)
    + end_date (string, optional)
    + fields (string, optional)
    + limit (number, optional)
    + offset (number, optional)

+ Response 200

    + Headers

            Content-Type: application/json
    
    + Body
    
            {
                "data": [
                    {
                        "group": {"date": "2016-05-04"},
                        "clicks_sum": 861,
                        "orders_sum": 50,
                        "sales_sum": 129852
                    },
                    {
                        "group": {"date": "2016-05-03"},
                        "clicks_sum": 1661,
                        "orders_sum": 69,
                        "sales_sum": 225298
                    },
                    {
                        "group": {"date": "2016-05-02"},
                        "clicks_sum": 1523,
                        "orders_sum": 70,
                        "sales_sum": 141676
                    },
                    {
                        "group": {"date": "2016-05-01"},
                        "clicks_sum": 1095,
                        "orders_sum": 54,
                        "sales_sum": 113470
                    }
                ],
                "limit": 10,
                "offset": 0
            }
